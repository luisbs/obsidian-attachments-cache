/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-attachments-cache@0.5.5 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-attachments-cache
 */
"use strict";const E=require("obsidian");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.3 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class Ct{error(t,e){console.error(t,...e)}warn(t,e){console.warn(t,...e)}info(t,e){console.info(t,...e)}debug(t,e){console.debug(t,...e)}trace(t,e){console.trace(t,...e)}group(t,e){return console.groupCollapsed(t,...e),console.groupEnd}}const S=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),$t=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class B{#t;#e;#n;#s=[];#i=[];get level(){return this.#e?this.#e:this.#t?.level??S.WARN}get format(){return this.#n?this.#n:this.#t?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const t=[];for(let e=0;e<this.#i.length-1;e++)t.push(this.#i[e][0]);return t.push(this.#i.at(-1)??""),t.join(".")}get drivers(){return Object.freeze(this.#s)}setLevel(t){return this.#e=t,this}setFormat(t){return this.#n=t,this}addDrivers(...t){for(const e of t)Array.isArray(e)?this.#s.push(...e):e&&this.#s.push(e);return this}addNamespaces(...t){for(const e of t)Array.isArray(e)?this.#i.push(...e):e&&this.#i.push(e);return this}static consoleLogger(t){const e=new B;return e.setLevel(S.WARN),e.addDrivers(new Ct),e.addNamespaces(t),e}make(t){const e=new B;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i,t),e}prefix(t,e){return this.format.replace("hh",String(t.getHours()).padStart(2,"0")).replace("mm",String(t.getMinutes()).padStart(2,"0")).replace("ss",String(t.getSeconds()).padStart(2,"0")).replace("ms",String(t.getMilliseconds()).padStart(3,"0")).replace("level",$t[e]).replace("namespace",this.namespace)}log(t,e,s){if(this.level>e)return;const i=this.prefix(t,e);switch(this.level){case S.ERROR:this.#s.forEach(n=>n.error(i,s));break;case S.WARN:this.#s.forEach(n=>n.warn(i,s));break;case S.INFO:this.#s.forEach(n=>n.info(i,s));break;case S.DEBUG:this.#s.forEach(n=>n.debug(i,s));break;default:this.#s.forEach(n=>n.trace(i,s))}}error(...t){this.log(new Date,S.ERROR,t)}warn(...t){this.log(new Date,S.WARN,t)}info(...t){this.log(new Date,S.INFO,t)}debug(...t){this.log(new Date,S.DEBUG,t)}trace(...t){this.log(new Date,S.TRACE,t)}group(...t){const e=new Mt;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i),t.length&&e.log(new Date,S.INFO,t),e}}class Mt extends B{#t=[];log(t,e,s){this.level>e||this.#t.push({timestamp:t,level:e,content:s})}flush(...t){if(this.#t.length===0){super.log(new Date,S.INFO,t);return}const e=this.prefix(new Date,S.INFO),s=this.drivers.map(i=>i.group(e,t));for(const{timestamp:i,level:n,content:a}of this.#t)super.log(i,n,a);s.forEach(i=>i()),this.#t=[]}}class D{static join(...t){return t.reduce((e,s)=>s?e?e.replace(/[\\/]+$/gi,"")+"/"+s.replace(/^[\\/]+/gi,""):s:e,"")}static normalize(t){return t.replaceAll(/[^\w-\\/#?&=':,. ]+/gi,"_")}static getName(t){return t.match(/[^\\/]+$/gi)?.at(0)}static getBasename(t){const e=this.getName(t);return e?this.removeExt(e):void 0}static getParent(t){if(/[\\/]/gi.test(t))return t.replace(/[\\/][^\\/]*$/gi,"")}static hasExt(t){return/\.[^\\/]*$/gi.test(t)}static getExt(t){return/(?<=\.)([^\\/#?]*)([#?].*)?$/gi.exec(t)?.at(1)}static removeExt(t){return t.replace(/(\.[^\\/]*)?([#?].*)?$/gi,"")}}class J{static isUrl(t){return/^https?:\/\//gi.test(t)}static getOrigin(t){return/^https?:\/\/[^\\/]+/gi.exec(t)?.at(0)}static getBaseurl(t){return/^https?:\/\/[^#?]*/gi.exec(t)?.at(0)}static getHash(t){return/(?<=#)[^?]*/gi.exec(t)?.at(0)}static getparams(t){return/(?<=\?).*/gi.exec(t)?.at(0)}}class k extends Error{constructor(t,e){super(),this.code=t,this.cause=e,this.name=`AttachmentError(${this.code})`,this.message=this.toStringMessage()}static assertResponse(t,e,s){if(!(e.status<400))throw new k(s,`requested url: ${t}
response status: ${e.status}
response headers:
${JSON.stringify(e.headers)}`)}toString(){return`${this.name}: ${this.toStringMessage()}`}toStringMessage(){const t=k.#t(this.code);return this.cause?this.cause instanceof Error?`${t}, context:

${this.cause}`:`${t}, context:

${JSON.stringify(this.cause)}`:t}static#t(t){switch(t){case"remote-no-url":return"remote param should be an URL";case"remote-no-ext":return"a file-extension could not be determined";case"url-request-head":return"the request to get the file-extension failed";case"url-request-get":return"the request to download the file failed";default:return"try-reloading Obsidian"}}}function Lt(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var U,at;function kt(){if(at)return U;at=1,U=r;function r(s,i,n){s instanceof RegExp&&(s=t(s,n)),i instanceof RegExp&&(i=t(i,n));var a=e(s,i,n);return a&&{start:a[0],end:a[1],pre:n.slice(0,a[0]),body:n.slice(a[0]+s.length,a[1]),post:n.slice(a[1]+i.length)}}function t(s,i){var n=i.match(s);return n?n[0]:null}r.range=e;function e(s,i,n){var a,o,h,c,l,p=n.indexOf(s),f=n.indexOf(i,p+1),u=p;if(p>=0&&f>0){if(s===i)return[p,f];for(a=[],h=n.length;u>=0&&!l;)u==p?(a.push(u),p=n.indexOf(s,u+1)):a.length==1?l=[a.pop(),f]:(o=a.pop(),o<h&&(h=o,c=f),f=n.indexOf(i,u+1)),u=p<f&&p>=0?p:f;a.length&&(l=[h,c])}return l}return U}var z,ot;function Pt(){if(ot)return z;ot=1;var r=kt();z=l;var t="\0SLASH"+Math.random()+"\0",e="\0OPEN"+Math.random()+"\0",s="\0CLOSE"+Math.random()+"\0",i="\0COMMA"+Math.random()+"\0",n="\0PERIOD"+Math.random()+"\0";function a(d){return parseInt(d,10)==d?parseInt(d,10):d.charCodeAt(0)}function o(d){return d.split("\\\\").join(t).split("\\{").join(e).split("\\}").join(s).split("\\,").join(i).split("\\.").join(n)}function h(d){return d.split(t).join("\\").split(e).join("{").split(s).join("}").split(i).join(",").split(n).join(".")}function c(d){if(!d)return[""];var b=[],T=r("{","}",d);if(!T)return d.split(",");var w=T.pre,A=T.body,_=T.post,v=w.split(",");v[v.length-1]+="{"+A+"}";var $=c(_);return _.length&&(v[v.length-1]+=$.shift(),v.push.apply(v,$)),b.push.apply(b,v),b}function l(d){return d?(d.substr(0,2)==="{}"&&(d="\\{\\}"+d.substr(2)),g(o(d),!0).map(h)):[]}function p(d){return"{"+d+"}"}function f(d){return/^-?0\d/.test(d)}function u(d,b){return d<=b}function m(d,b){return d>=b}function g(d,b){var T=[],w=r("{","}",d);if(!w)return[d];var A=w.pre,_=w.post.length?g(w.post,!1):[""];if(/\$$/.test(w.pre))for(var v=0;v<_.length;v++){var $=A+"{"+w.body+"}"+_[v];T.push($)}else{var Tt=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(w.body),Q=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(w.body),F=Tt||Q,Ot=w.body.indexOf(",")>=0;if(!F&&!Ot)return w.post.match(/,.*\}/)?(d=w.pre+"{"+w.body+s+w.post,g(d)):[d];var y;if(F)y=w.body.split(/\.\./);else if(y=c(w.body),y.length===1&&(y=g(y[0],!1).map(p),y.length===1))return _.map(function(_t){return w.pre+y[0]+_t});var M;if(F){var tt=a(y[0]),et=a(y[1]),Nt=Math.max(y[0].length,y[1].length),st=y.length==3?Math.abs(a(y[2])):1,it=u,Dt=et<tt;Dt&&(st*=-1,it=m);var At=y.some(f);M=[];for(var P=tt;it(P,et);P+=st){var C;if(Q)C=String.fromCharCode(P),C==="\\"&&(C="");else if(C=String(P),At){var nt=Nt-C.length;if(nt>0){var rt=new Array(nt+1).join("0");P<0?C="-"+rt+C.slice(1):C=rt+C}}M.push(C)}}else{M=[];for(var L=0;L<y.length;L++)M.push.apply(M,g(y[L],!1))}for(var L=0;L<M.length;L++)for(var v=0;v<_.length;v++){var $=A+M[L]+_[v];(!b||F||$)&&T.push($)}}return T}return z}var Wt=Pt();const jt=Lt(Wt),Bt=1024*64,G=r=>{if(typeof r!="string")throw new TypeError("invalid pattern");if(r.length>Bt)throw new TypeError("pattern is too long")},Ft={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},W=r=>r.replace(/[[\]\\-]/g,"\\$&"),Gt=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),ht=r=>r.join(""),It=(r,t)=>{const e=t;if(r.charAt(e)!=="[")throw new Error("not in a brace expression");const s=[],i=[];let n=e+1,a=!1,o=!1,h=!1,c=!1,l=e,p="";t:for(;n<r.length;){const g=r.charAt(n);if((g==="!"||g==="^")&&n===e+1){c=!0,n++;continue}if(g==="]"&&a&&!h){l=n+1;break}if(a=!0,g==="\\"&&!h){h=!0,n++;continue}if(g==="["&&!h){for(const[d,[b,T,w]]of Object.entries(Ft))if(r.startsWith(d,n)){if(p)return["$.",!1,r.length-e,!0];n+=d.length,w?i.push(b):s.push(b),o=o||T;continue t}}if(h=!1,p){g>p?s.push(W(p)+"-"+W(g)):g===p&&s.push(W(g)),p="",n++;continue}if(r.startsWith("-]",n+1)){s.push(W(g+"-")),n+=2;continue}if(r.startsWith("-",n+1)){p=g,n+=2;continue}s.push(W(g)),n++}if(l<n)return["",!1,0,!1];if(!s.length&&!i.length)return["$.",!1,r.length-e,!0];if(i.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!c){const g=s[0].length===2?s[0].slice(-1):s[0];return[Gt(g),!1,l-e,!1]}const f="["+(c?"^":"")+ht(s)+"]",u="["+(c?"":"^")+ht(i)+"]";return[s.length&&i.length?"("+f+"|"+u+")":s.length?f:u,o,l-e,!0]},j=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/\[([^\/\\])\]/g,"$1"):r.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1"),Ut=new Set(["!","?","+","*","@"]),ct=r=>Ut.has(r),zt="(?!(?:^|/)\\.\\.?(?:$|/))",H="(?!\\.)",Ht=new Set(["[","."]),qt=new Set(["..","."]),Vt=new Set("().*{}+?[]^$\\!"),Jt=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),Z="[^/]",lt=Z+"*?",ut=Z+"+?";class x{type;#t;#e;#n=!1;#s=[];#i;#a;#r;#o=!1;#h;#c;#g=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#i=e,this.#t=this.#i?this.#i.#t:this,this.#h=this.#t===this?s:this.#t.#h,this.#r=this.#t===this?[]:this.#t.#r,t==="!"&&!this.#t.#o&&this.#r.push(this),this.#a=this.#i?this.#i.#s.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(const t of this.#s)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#c!==void 0?this.#c:this.type?this.#c=this.type+"("+this.#s.map(t=>String(t)).join("|")+")":this.#c=this.#s.map(t=>String(t)).join("")}#u(){if(this!==this.#t)throw new Error("should only call on root");if(this.#o)return this;this.toString(),this.#o=!0;let t;for(;t=this.#r.pop();){if(t.type!=="!")continue;let e=t,s=e.#i;for(;s;){for(let i=e.#a+1;!s.type&&i<s.#s.length;i++)for(const n of t.#s){if(typeof n=="string")throw new Error("string part in extglob AST??");n.copyIn(s.#s[i])}e=s,s=e.#i}}return this}push(...t){for(const e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof x&&e.#i===this))throw new Error("invalid part: "+e);this.#s.push(e)}}toJSON(){const t=this.type===null?this.#s.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#s.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#o&&this.#i?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#i?.isStart())return!1;if(this.#a===0)return!0;const t=this.#i;for(let e=0;e<this.#a;e++){const s=t.#s[e];if(!(s instanceof x&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#i?.type==="!")return!0;if(!this.#i?.isEnd())return!1;if(!this.type)return this.#i?.isEnd();const t=this.#i?this.#i.#s.length:0;return this.#a===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){const e=new x(this.type,t);for(const s of this.#s)e.copyIn(s);return e}static#l(t,e,s,i){let n=!1,a=!1,o=-1,h=!1;if(e.type===null){let u=s,m="";for(;u<t.length;){const g=t.charAt(u++);if(n||g==="\\"){n=!n,m+=g;continue}if(a){u===o+1?(g==="^"||g==="!")&&(h=!0):g==="]"&&!(u===o+2&&h)&&(a=!1),m+=g;continue}else if(g==="["){a=!0,o=u,h=!1,m+=g;continue}if(!i.noext&&ct(g)&&t.charAt(u)==="("){e.push(m),m="";const d=new x(g,e);u=x.#l(t,d,u,i),e.push(d);continue}m+=g}return e.push(m),u}let c=s+1,l=new x(null,e);const p=[];let f="";for(;c<t.length;){const u=t.charAt(c++);if(n||u==="\\"){n=!n,f+=u;continue}if(a){c===o+1?(u==="^"||u==="!")&&(h=!0):u==="]"&&!(c===o+2&&h)&&(a=!1),f+=u;continue}else if(u==="["){a=!0,o=c,h=!1,f+=u;continue}if(ct(u)&&t.charAt(c)==="("){l.push(f),f="";const m=new x(u,l);l.push(m),c=x.#l(t,m,c,i);continue}if(u==="|"){l.push(f),f="",p.push(l),l=new x(null,e);continue}if(u===")")return f===""&&e.#s.length===0&&(e.#g=!0),l.push(f),f="",e.push(...p,l),c;f+=u}return e.type=null,e.#e=void 0,e.#s=[t.substring(s-1)],c}static fromGlob(t,e={}){const s=new x(null,void 0,e);return x.#l(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();const t=this.toString(),[e,s,i,n]=this.toRegExpSource();if(!(i||this.#e||this.#h.nocase&&!this.#h.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;const o=(this.#h.nocase?"i":"")+(n?"u":"");return Object.assign(new RegExp(`^${e}$`,o),{_src:e,_glob:t})}get options(){return this.#h}toRegExpSource(t){const e=t??!!this.#h.dot;if(this.#t===this&&this.#u(),!this.type){const h=this.isStart()&&this.isEnd(),c=this.#s.map(u=>{const[m,g,d,b]=typeof u=="string"?x.#d(u,this.#e,h):u.toRegExpSource(t);return this.#e=this.#e||d,this.#n=this.#n||b,m}).join("");let l="";if(this.isStart()&&typeof this.#s[0]=="string"&&!(this.#s.length===1&&qt.has(this.#s[0]))){const m=Ht,g=e&&m.has(c.charAt(0))||c.startsWith("\\.")&&m.has(c.charAt(2))||c.startsWith("\\.\\.")&&m.has(c.charAt(4)),d=!e&&!t&&m.has(c.charAt(0));l=g?zt:d?H:""}let p="";return this.isEnd()&&this.#t.#o&&this.#i?.type==="!"&&(p="(?:$|\\/)"),[l+c+p,j(c),this.#e=!!this.#e,this.#n]}const s=this.type==="*"||this.type==="+",i=this.type==="!"?"(?:(?!(?:":"(?:";let n=this.#p(e);if(this.isStart()&&this.isEnd()&&!n&&this.type!=="!"){const h=this.toString();return this.#s=[h],this.type=null,this.#e=void 0,[h,j(this.toString()),!1,!1]}let a=!s||t||e?"":this.#p(!0);a===n&&(a=""),a&&(n=`(?:${n})(?:${a})*?`);let o="";if(this.type==="!"&&this.#g)o=(this.isStart()&&!e?H:"")+ut;else{const h=this.type==="!"?"))"+(this.isStart()&&!e&&!t?H:"")+lt+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&a?")":this.type==="*"&&a?")?":`)${this.type}`;o=i+n+h}return[o,j(n),this.#e=!!this.#e,this.#n]}#p(t){return this.#s.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");const[s,i,n,a]=e.toRegExpSource(t);return this.#n=this.#n||a,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#d(t,e,s=!1){let i=!1,n="",a=!1;for(let o=0;o<t.length;o++){const h=t.charAt(o);if(i){i=!1,n+=(Vt.has(h)?"\\":"")+h;continue}if(h==="\\"){o===t.length-1?n+="\\\\":i=!0;continue}if(h==="["){const[c,l,p,f]=It(t,o);if(p){n+=c,a=a||l,o+=p-1,e=e||f;continue}}if(h==="*"){s&&t==="*"?n+=ut:n+=lt,e=!0;continue}if(h==="?"){n+=Z,e=!0;continue}n+=Jt(h)}return[n,j(t),!!e,a]}}const Zt=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/[?*()[\]]/g,"[$&]"):r.replace(/[?*()[\]\\]/g,"\\$&"),R=(r,t,e={})=>(G(t),!e.nocomment&&t.charAt(0)==="#"?!1:new I(t,e).match(r)),Xt=/^\*+([^+@!?\*\[\(]*)$/,Yt=r=>t=>!t.startsWith(".")&&t.endsWith(r),Kt=r=>t=>t.endsWith(r),Qt=r=>(r=r.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(r)),te=r=>(r=r.toLowerCase(),t=>t.toLowerCase().endsWith(r)),ee=/^\*+\.\*+$/,se=r=>!r.startsWith(".")&&r.includes("."),ie=r=>r!=="."&&r!==".."&&r.includes("."),ne=/^\.\*+$/,re=r=>r!=="."&&r!==".."&&r.startsWith("."),ae=/^\*+$/,oe=r=>r.length!==0&&!r.startsWith("."),he=r=>r.length!==0&&r!=="."&&r!=="..",ce=/^\?+([^+@!?\*\[\(]*)?$/,le=([r,t=""])=>{const e=yt([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},ue=([r,t=""])=>{const e=St([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},pe=([r,t=""])=>{const e=St([r]);return t?s=>e(s)&&s.endsWith(t):e},fe=([r,t=""])=>{const e=yt([r]);return t?s=>e(s)&&s.endsWith(t):e},yt=([r])=>{const t=r.length;return e=>e.length===t&&!e.startsWith(".")},St=([r])=>{const t=r.length;return e=>e.length===t&&e!=="."&&e!==".."},Rt=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",pt={win32:{sep:"\\"},posix:{sep:"/"}},ge=Rt==="win32"?pt.win32.sep:pt.posix.sep;R.sep=ge;const N=Symbol("globstar **");R.GLOBSTAR=N;const de="[^/]",me=de+"*?",we="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",Ee="(?:(?!(?:\\/|^)\\.).)*?",be=(r,t={})=>e=>R(e,r,t);R.filter=be;const O=(r,t={})=>Object.assign({},r,t),ve=r=>{if(!r||typeof r!="object"||!Object.keys(r).length)return R;const t=R;return Object.assign((s,i,n={})=>t(s,i,O(r,n)),{Minimatch:class extends t.Minimatch{constructor(i,n={}){super(i,O(r,n))}static defaults(i){return t.defaults(O(r,i)).Minimatch}},AST:class extends t.AST{constructor(i,n,a={}){super(i,n,O(r,a))}static fromGlob(i,n={}){return t.AST.fromGlob(i,O(r,n))}},unescape:(s,i={})=>t.unescape(s,O(r,i)),escape:(s,i={})=>t.escape(s,O(r,i)),filter:(s,i={})=>t.filter(s,O(r,i)),defaults:s=>t.defaults(O(r,s)),makeRe:(s,i={})=>t.makeRe(s,O(r,i)),braceExpand:(s,i={})=>t.braceExpand(s,O(r,i)),match:(s,i,n={})=>t.match(s,i,O(r,n)),sep:t.sep,GLOBSTAR:N})};R.defaults=ve;const xt=(r,t={})=>(G(r),t.nobrace||!/\{(?:(?!\{).)*\}/.test(r)?[r]:jt(r));R.braceExpand=xt;const ye=(r,t={})=>new I(r,t).makeRe();R.makeRe=ye;const Se=(r,t,e={})=>{const s=new I(t,e);return r=r.filter(i=>s.match(i)),s.options.nonull&&!r.length&&r.push(t),r};R.match=Se;const ft=/[?*]|[+@!]\(.*?\)|\[|\]/,Re=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&");class I{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){G(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||Rt,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const t of this.set)for(const e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...n)=>console.error(...n)),this.debug(this.pattern,this.globSet);const s=this.globSet.map(n=>this.slashSplit(n));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let i=this.globParts.map((n,a,o)=>{if(this.isWindows&&this.windowsNoMagicRoot){const h=n[0]===""&&n[1]===""&&(n[2]==="?"||!ft.test(n[2]))&&!ft.test(n[3]),c=/^[a-z]:/i.test(n[0]);if(h)return[...n.slice(0,4),...n.slice(4).map(l=>this.parse(l))];if(c)return[n[0],...n.slice(1).map(l=>this.parse(l))]}return n.map(h=>this.parse(h))});if(this.debug(this.pattern,i),this.set=i.filter(n=>n.indexOf(!1)===-1),this.isWindows)for(let n=0;n<this.set.length;n++){const a=this.set[n];a[0]===""&&a[1]===""&&this.globParts[n][2]==="?"&&typeof a[3]=="string"&&/^[a-z]:$/i.test(a[3])&&(a[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]==="**"&&(t[s][i]="*");const{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let i=s;for(;e[i+1]==="**";)i++;i!==s&&e.splice(s,i-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,i)=>{const n=s[s.length-1];return i==="**"&&n==="**"?s:i===".."&&n&&n!==".."&&n!=="."&&n!=="**"?(s.pop(),s):(s.push(i),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let i=1;i<t.length-1;i++){const n=t[i];i===1&&n===""&&t[0]===""||(n==="."||n==="")&&(e=!0,t.splice(i,1),i--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){const i=t[s-1];i&&i!=="."&&i!==".."&&i!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let i=-1;for(;(i=s.indexOf("**",i+1))!==-1;){let a=i;for(;s[a+1]==="**";)a++;a>i&&s.splice(i+1,a-i);let o=s[i+1];const h=s[i+2],c=s[i+3];if(o!==".."||!h||h==="."||h===".."||!c||c==="."||c==="..")continue;e=!0,s.splice(i,1);const l=s.slice(0);l[i]="**",t.push(l),i--}if(!this.preserveMultipleSlashes){for(let a=1;a<s.length-1;a++){const o=s[a];a===1&&o===""&&s[0]===""||(o==="."||o==="")&&(e=!0,s.splice(a,1),a--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let n=0;for(;(n=s.indexOf("..",n+1))!==-1;){const a=s[n-1];if(a&&a!=="."&&a!==".."&&a!=="**"){e=!0;const h=n===1&&s[n+1]==="**"?["."]:[];s.splice(n-1,2,...h),s.length===0&&s.push(""),n-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){const i=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(i){t[e]=[],t[s]=i;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let i=0,n=0,a=[],o="";for(;i<t.length&&n<e.length;)if(t[i]===e[n])a.push(o==="b"?e[n]:t[i]),i++,n++;else if(s&&t[i]==="**"&&e[n]===t[i+1])a.push(t[i]),i++;else if(s&&e[n]==="**"&&t[i]===e[n+1])a.push(e[n]),n++;else if(t[i]==="*"&&e[n]&&(this.options.dot||!e[n].startsWith("."))&&e[n]!=="**"){if(o==="b")return!1;o="a",a.push(t[i]),i++,n++}else if(e[n]==="*"&&t[i]&&(this.options.dot||!t[i].startsWith("."))&&t[i]!=="**"){if(o==="a")return!1;o="b",a.push(e[n]),i++,n++}else return!1;return t.length===e.length&&a}parseNegate(){if(this.nonegate)return;const t=this.pattern;let e=!1,s=0;for(let i=0;i<t.length&&t.charAt(i)==="!";i++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){const i=this.options;if(this.isWindows){const g=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),d=!g&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),b=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),T=!b&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),w=d?3:g?0:void 0,A=T?3:b?0:void 0;if(typeof w=="number"&&typeof A=="number"){const[_,v]=[t[w],e[A]];_.toLowerCase()===v.toLowerCase()&&(e[A]=_,A>w?e=e.slice(A):w>A&&(t=t.slice(w)))}}const{optimizationLevel:n=1}=this.options;n>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var a=0,o=0,h=t.length,c=e.length;a<h&&o<c;a++,o++){this.debug("matchOne loop");var l=e[o],p=t[a];if(this.debug(e,l,p),l===!1)return!1;if(l===N){this.debug("GLOBSTAR",[e,l,p]);var f=a,u=o+1;if(u===c){for(this.debug("** at the end");a<h;a++)if(t[a]==="."||t[a]===".."||!i.dot&&t[a].charAt(0)===".")return!1;return!0}for(;f<h;){var m=t[f];if(this.debug(`
globstar while`,t,f,e,u,m),this.matchOne(t.slice(f),e.slice(u),s))return this.debug("globstar found match!",f,h,m),!0;if(m==="."||m===".."||!i.dot&&m.charAt(0)==="."){this.debug("dot detected!",t,f,e,u);break}this.debug("globstar swallow a segment, and continue"),f++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,f,e,u),f===h))}let g;if(typeof l=="string"?(g=p===l,this.debug("string match",l,p,g)):(g=l.test(p),this.debug("pattern match",l,p,g)),!g)return!1}if(a===h&&o===c)return!0;if(a===h)return s;if(o===c)return a===h-1&&t[a]==="";throw new Error("wtf?")}braceExpand(){return xt(this.pattern,this.options)}parse(t){G(t);const e=this.options;if(t==="**")return N;if(t==="")return"";let s,i=null;(s=t.match(ae))?i=e.dot?he:oe:(s=t.match(Xt))?i=(e.nocase?e.dot?te:Qt:e.dot?Kt:Yt)(s[1]):(s=t.match(ce))?i=(e.nocase?e.dot?ue:le:e.dot?pe:fe)(s):(s=t.match(ee))?i=e.dot?ie:se:(s=t.match(ne))&&(i=re);const n=x.fromGlob(t,this.options).toMMPattern();return i&&typeof n=="object"&&Reflect.defineProperty(n,"test",{value:i}),n}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,s=e.noglobstar?me:e.dot?we:Ee,i=new Set(e.nocase?["i"]:[]);let n=t.map(h=>{const c=h.map(l=>{if(l instanceof RegExp)for(const p of l.flags.split(""))i.add(p);return typeof l=="string"?Re(l):l===N?N:l._src});return c.forEach((l,p)=>{const f=c[p+1],u=c[p-1];l!==N||u===N||(u===void 0?f!==void 0&&f!==N?c[p+1]="(?:\\/|"+s+"\\/)?"+f:c[p]=s:f===void 0?c[p-1]=u+"(?:\\/|"+s+")?":f!==N&&(c[p-1]=u+"(?:\\/|\\/"+s+"\\/)"+f,c[p+1]=N))}),c.filter(l=>l!==N).join("/")}).join("|");const[a,o]=t.length>1?["(?:",")"]:["",""];n="^"+a+n+o+"$",this.negate&&(n="^(?!"+n+").+$");try{this.regexp=new RegExp(n,[...i].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;const s=this.options;this.isWindows&&(t=t.split("\\").join("/"));const i=this.slashSplit(t);this.debug(this.pattern,"split",i);const n=this.set;this.debug(this.pattern,"set",n);let a=i[i.length-1];if(!a)for(let o=i.length-2;!a&&o>=0;o--)a=i[o];for(let o=0;o<n.length;o++){const h=n[o];let c=i;if(s.matchBase&&h.length===1&&(c=[a]),this.matchOne(c,h,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return R.defaults(t).Minimatch}}R.AST=x;R.Minimatch=I;R.escape=Zt;R.unescape=j;function xe(r){return r.replaceAll(" ","-").replaceAll(/[^\w-]/gi,"").toLowerCase()}function X(r,t){return!r.startsWith("*")&&t.startsWith("*")?-1:r.startsWith("*")&&!t.startsWith("*")?1:r.startsWith(t)?-1:t.startsWith(r)?1:r.localeCompare(t,"en")}function Te(r){switch(r){case"image/jpeg":return"jpg";case"image/tiff":return"tif";default:return r.split(/\/|\+/gi)[1]}}function Oe(r){return{cache_matchers:Ne(r.settings.cache_configs),url_cache_matcher:dt(r.settings.url_param_cache),url_ignore_matcher:dt(r.settings.url_param_ignore),note_cache_matcher:gt(r.app,r.settings.note_param_cache),note_ignore_matcher:gt(r.app,r.settings.note_param_ignore)}}function gt(r,t="fallback_param"){return(e,s)=>{const i=r.metadataCache.getCache(e);if(!i?.frontmatter)return!1;const n=E.parseFrontMatterEntry(i.frontmatter,t);if(!n)return!1;if(String.isString(n))return q(n,s);if(!Array.isArray(n))return!1;for(const a of n)if(String.isString(a)&&q(a,s))return!0;return!1}}function q(r,t){return r.startsWith("http")?t.startsWith(r):new RegExp("^https?://(\\w+\\.)*"+r,"g").test(t)}function dt(r="fallback_param"){const t=new RegExp("[?&]"+r+"([&=\\s]|$)","i");return e=>t.test(e)}function Ne(r){return r.map(t=>{let e=n=>D.getParent(n)??"/";switch(t.mode){case"NOTE-FOLDER":e=n=>D.join(D.getParent(n),t.target);break;case"TARGET-PATH":e=n=>D.join(t.target,D.removeExt(n));break;case"TARGET-NOTE":e=n=>D.join(t.target,D.getBasename(n));break;case"TARGET":e=()=>t.target;break}const s=t.pattern!=="*"?n=>R(n,t.pattern):()=>!0,i=n=>{for(const{pattern:a,whitelisted:o}of t.remotes)if(a==="*"||q(a,n))return o;return!1};return{source:Object.freeze(t),isEnabled:()=>t.enabled,testRemote:i,testPath:s,resolve:e}})}async function De(r,t){t.debug(`Resolving extension for ${r}`);const e=J.getOrigin(r),s=await E.requestUrl({url:r,throw:!1,method:"HEAD",headers:{Referer:e?e+"/":""}});return k.assertResponse(r,s,"url-request-head"),Te(s.headers["content-type"])}async function Ae(r,t){t.debug(`Downloading ${r}`);const e=J.getOrigin(r),s=await E.requestUrl({url:r,throw:!1,method:"GET",headers:{Referer:e?e+"/":""}});return k.assertResponse(r,s,"url-request-get"),s.arrayBuffer}function mt(r){const t=[];let e=!1;for(const s of r)t.every(i=>i.pattern!==s.pattern)&&(s.pattern==="*"&&(e=!0),t.push(s));return e||t.push({pattern:"*",whitelisted:!1}),t.sort((s,i)=>X(s.pattern,i.pattern))}function wt(r){return r.map(({whitelisted:t,pattern:e})=>`${t?"w":"b"} ${e}`).join(`
`)}function _e(r){if(!/\s+/.test(r))return[r,void 0];const t=r.split(/\s+/g);return t[0].startsWith("w")?[t[1],!0]:t[0].startsWith("b")?[t[1],!1]:[t[1],void 0]}function Ce(r,t){const e=[];let s=!1;for(const i of t.split(/\n+/g)){const[n,a]=_e(i);if(n==="*"&&(s=!0),!e.some(o=>o.pattern===n)){if(a!==void 0){e.push({pattern:n,whitelisted:a});continue}for(const o of r){if(n===o.pattern){e.push({pattern:n,whitelisted:o.whitelisted});break}if(Math.abs(n.length-o.pattern.length)===1){if(o.pattern.startsWith(n)){e.push({pattern:n,whitelisted:o.whitelisted});break}else if(n.startsWith(o.pattern)){e.push({pattern:n,whitelisted:o.whitelisted});break}}}e.some(o=>o.pattern===n)||e.push({pattern:n,whitelisted:!1})}}return s||e.push({pattern:"*",whitelisted:!1}),e.sort((i,n)=>X(i.pattern,n.pattern))}function $e(r){const t=[];let e=!1;for(const s of r.split(/\n+/g)){const i=s.trim().replace(/^[wb]\s+/,"");if(i==="*"){e=!0;continue}/^\w+:/gi.test(i)&&t.push("remove protocols, ex: 'http://'"),/^(\w+\.)+\w+/.test(i)||t.push("should include domain, ex: 'example.org/path'")}return e||t.unshift("should include a fallback '*'"),t}function V(r){const t=[];for(const e of r){const s=t.findIndex(i=>i.pattern===e.pattern);if(s===-1){t.push({...e,remotes:mt(e.remotes)});continue}e.remotes.length>t[s].remotes.length&&(t[s]={...e,remotes:mt(e.remotes)})}return t.sort((e,s)=>X(e.pattern,s.pattern))}function Me(r,t){if(!t)return["invalid pattern"];for(const e of r)if(e.pattern===t)return[`duplicated pattern '${t}'`];return[]}const Le={ERROR:"ERROR",WARN:" WARN",INFO:" INFO",DEBUG:"DEBUG",TRACE:"TRACE"},ke={LOWER:0,NORMAL:1,HIGHER:Number.MAX_SAFE_INTEGER-1},Pe={LOWER:"Only cache static attachments",NORMAL:"Cache majority of attachments",HIGHER:"Cache all posible attachments"},We={NOTE:"Attachments next to the note","NOTE-FOLDER":"Attachments on subfolder",TARGET:"Attachments on cache folder","TARGET-NOTE":"Attachments on cache note folder","TARGET-PATH":"Attachments on cache note path"},Et={NOTE:"Store in the same folder as the note","NOTE-FOLDER":"Store next to the note in subfolder",TARGET:"Store in folder","TARGET-NOTE":"Store in subfolder with the note-name under","TARGET-PATH":"Store in a replated note-path under"},je=({mode:r,target:t})=>{switch(r){case"NOTE":return"folder/img1.jpg";case"NOTE-FOLDER":return`folder/${t}/img1.jpg`;case"TARGET":return`${t}/img1.jpg`;case"TARGET-NOTE":return`${t}/note1/img1.jpg`;case"TARGET-PATH":return`${t}/folder/note1/img1.jpg`}};class Be{#t;#e;#n;#s;#i;constructor(t,e){this.#t={...e,remotes:[...e.remotes]},this.#e=new E.Setting(t),this.#n=this.#e.settingEl.createDiv("cache-details"),this.#s=this.#e.settingEl.createDiv("cache-remotes"),this.#o(),this.#c(),this.#u()}#a(){return createFragment(t=>{t.append(`${this.#t.enabled?"Enabled":"Disabled"} path: `),t.createEl("code").appendText(this.#t.pattern)})}#r(){return this.#t.mode==="NOTE"?Et.NOTE:createFragment(t=>{t.append(Et[this.#t.mode]),t.createEl("code").appendText(this.#t.target)})}#o(){this.#e.setName(this.#a()),this.#e.setDesc(this.#r()),this.#t.pattern!=="*"&&this.#e.addExtraButton(t=>{t.setIcon("trash-2").setTooltip("Remove"),t.onClick(()=>{if(this.#t.pattern==="*"){console.warn("fallback config('*') can't be removed");return}this.#e.clear(),this.#e.settingEl.remove(),this.#m()})}),this.#e.addToggle(t=>{t.setValue(this.#t.enabled),t.onChange(e=>{this.#t.enabled=e,this.#f(),this.#e.setName(this.#a())})}),this.#e.addExtraButton(t=>{let e=!1;t.setIcon("chevron-down").setTooltip("Details"),t.onClick(()=>{e=!e,e?(t.setIcon("chevron-up"),this.#e.settingEl.addClass("show-details")):(t.setIcon("chevron-down"),this.#e.settingEl.removeClass("show-details"))})})}#h(){return createFragment(t=>{t.append("Attachments storage path, ex:");const e=t.createEl("ul"),s=e.createEl("li");s.append("Note: '"),s.createEl("b").appendText("folder/note1.md"),s.append("'");const i=e.createEl("li");i.append("Attachment: '"),i.createEl("b").appendText(je(this.#t)),i.append("'")})}#c(){let t;const e=new E.Setting(this.#n);e.setName("Storage"),e.setDesc(this.#h()),e.addDropdown(a=>{a.addOptions(We),a.setValue(this.#t.mode),a.onChange(o=>{this.#t.mode=o,this.#f(),e.setDesc(this.#h()),this.#t.mode==="NOTE"?(t?.setDisabled(!0),t?.setValue("")):(t?.setDisabled(!1),t?.setValue(this.#t.target))})}),e.addText(a=>{t=a,this.#t.mode==="NOTE"?a.setDisabled(!0):a.setValue(this.#t.target),a.onChange(o=>{this.#t.target=o,this.#f(),e.setDesc(this.#h())})});const s=createFragment(),i=s.createEl("ul"),n=new E.Setting(this.#n);n.setClass("remotes-input"),n.setName("Remotes"),n.setDesc(s),n.addTextArea(a=>{this.#i=a,a.setValue(wt(this.#t.remotes)),a.onChange(o=>{i.empty();const h=$e(o);if(h.length>0){h.forEach(c=>i.createEl("li").appendText(c));return}this.#t.remotes=Ce(this.#t.remotes,o),this.#f(),this.#u()})})}#g(t){return createFragment(e=>{e.append(`${t.whitelisted?"Whitelisted":"Blacklisted"} remote: `),e.createEl("code").appendText(t.pattern)})}#u(){this.#s.empty();for(const t of this.#t.remotes){const e=new E.Setting(this.#s);e.setName(this.#g(t)),t.pattern!=="*"&&e.addExtraButton(s=>{s.setIcon("trash-2").setTooltip("Remove"),s.onClick(()=>{const i=this.#t.remotes.filter(n=>n.pattern!==t.pattern);this.#l(i)})}),e.addButton(s=>{s.setButtonText(t.whitelisted?"Blacklist":"Whitelist"),s.onClick(()=>{const i=this.#t.remotes.map(n=>n.pattern!==t.pattern?n:{...n,whitelisted:!n.whitelisted});this.#l(i)})})}}#l(t){this.#t.remotes=t,this.#f(),this.#i?.setValue(wt(t)),this.#u()}#p=[];#d=[];#f(){for(const t of this.#p)t(this.#t)}#m(){for(const t of this.#d)t(this.#t)}onChange(t){return this.#p.push(t),this}onRemove(t){return this.#d.push(t),this}}function bt(r,t){return createFragment(e=>{e.appendText(t+". Check the "),e.createEl("a",{text:"Docs",href:`https://github.com/luisbs/obsidian-attachments-cache/blob/main/docs/settings.md#${xe(r)}`}),e.appendText(".")})}class Fe extends E.PluginSettingTab{#t;#e;constructor(t){super(t.app,t),this.#t=t}display(){this.containerEl.empty(),this.containerEl.addClass("attachments-cache-settings"),this.#n(),new E.Setting(this.containerEl).setName("Overrides").setHeading(),this.#s(),new E.Setting(this.containerEl).setName("Rules").setHeading(),this.#i(),this.#e=this.containerEl.createDiv("configs-list"),this.#a()}#n(){const t=new E.Setting(this.containerEl);t.setName("Log level"),t.setDesc(bt("Log level","To check the plugin logs")),t.addDropdown(i=>{i.addOptions(Le),i.setValue(this.#t.settings.plugin_level),i.onChange(this.#r.bind(this,"plugin_level"))});const e=new E.Setting(this.containerEl);e.setName("Cache priority"),e.setDesc(bt("Cache priority","Affects the attachments been cached")),e.addDropdown(i=>{i.addOptions(Pe),i.setValue(this.#t.settings.plugin_priority),i.onChange(this.#r.bind(this,"plugin_priority"))});const s=new E.Setting(this.containerEl);s.setName("Keep special characters"),s.setDesc("If you are having problems with special characters on paths, disable this setting."),s.addToggle(i=>{i.setValue(this.#t.settings.allow_characters),i.onChange(this.#r.bind(this,"allow_characters"))})}#s(){const t=new E.Setting(this.containerEl);t.setName("URL's ignore param"),t.setDesc("Overrides rules and ignores the attachment."),t.addText(n=>{n.setValue(this.#t.settings.url_param_ignore),n.onChange(this.#r.bind(this,"url_param_ignore"))});const e=new E.Setting(this.containerEl);e.setName("URL's cache param"),e.setDesc("Overrides rules and caches the attachment."),e.addText(n=>{n.setValue(this.#t.settings.url_param_cache),n.onChange(this.#r.bind(this,"url_param_cache"))});const s=new E.Setting(this.containerEl);s.setName("Note's ignore frontmatter attribute"),s.setDesc("Overrides rules and ignores the Note attachments."),s.addText(n=>{n.setValue(this.#t.settings.note_param_ignore),n.onChange(this.#r.bind(this,"note_param_ignore"))});const i=new E.Setting(this.containerEl);i.setName("Note's cache frontmatter attribute"),i.setDesc("Overrides rules and caches the Note attachments."),i.addText(n=>{n.setValue(this.#t.settings.note_param_cache),n.onChange(this.#r.bind(this,"note_param_cache"))})}#i(){let t=null,e=null,s=null;const i=createFragment(),n=i.createEl("ul"),a=new E.Setting(this.containerEl);a.setClass("configs-header"),a.setName("Duplicate cache rule"),a.setDesc(i),a.addDropdown(o=>{e=o,o.setValue("*");for(const h of this.#t.settings.cache_configs)o.addOption(h.pattern,h.pattern)}),a.addText(o=>{t=o,o.setPlaceholder("glob: **/*.md"),o.onChange(h=>{if(n.empty(),!h){s?.setDisabled(!0);return}const c=Me(this.#t.settings.cache_configs,h);if(c.length>0){c.forEach(l=>n.createEl("li").appendText(l));return}s?.setDisabled(c.length>0)})}),a.addButton(o=>{s=o,o.setButtonText("Duplicate"),o.setDisabled(!0),o.onClick(()=>{const h=t?.getValue(),c=e?.getValue()??"*",l=this.#t.settings.cache_configs.find(f=>f.pattern===c);if(!h||!l){console.warn("unexpected state");return}const p=this.#t.settings.cache_configs;p.push({pattern:h,remotes:l.remotes,enabled:l.enabled,target:l.target,mode:l.mode}),this.#o(p)})})}#a(){if(this.#e){this.#e.empty();for(const t of this.#t.settings.cache_configs){const e=new Be(this.#e,t);e.onChange(s=>{const i=this.#t.settings.cache_configs.map(n=>n.pattern===s.pattern?s:n);this.#o(i)}),e.onRemove(s=>{const i=this.#t.settings.cache_configs.filter(n=>n.pattern!==s.pattern);this.#o(i)})}}}#r(t,e){this.#t.settings[t]=e,this.#t.saveSettings()}#o(t){this.#t.settings.cache_configs=V(t),this.#t.saveSettings()}}class Ge{constructor(t){this.plugin=t}#t;syncPriority(){this.#t&&(this.#t.sortOrder=ke[this.plugin.settings.plugin_priority])}registerMarkdownProcessor(){this.#t=this.plugin.registerMarkdownPostProcessor((t,{sourcePath:e})=>{if(this.plugin.settings.plugin_priority==="LOWER"){this.#e(t,e);return}const s=this.plugin.settings.plugin_priority==="HIGHER"?1e4:2e3;setTimeout(()=>void this.#e(t,e),s)}),this.syncPriority()}async#e(t,e){for(const s of Array.from(t.querySelectorAll("img"))){const i=await this.plugin.api.cache(e,s.src);i&&(s.src=i)}}}class Y{#t;#e;#n;#s=new Map;constructor(t){this.#t=t.log.make(Y.name),this.#e=t.app.vault,this.#n=t}mayCache(t,e){return!!this.#i({notepath:t,remote:e},this.#t)}async isCached(t,e){const s=await this.resolve(t,e);return!!s&&!!this.#e.getAbstractFileByPath(s)}async resource(t,e){const s=await this.resolve(t,e);if(!s)return;const i=this.#e.getFileByPath(s);return i?this.#e.getResourcePath(i):void 0}async resolve(t,e){const s=this.#t.group();try{s.debug("Resolving",{notepath:t,remote:e});const i=await this.#a({notepath:t,remote:e},s);if(i)return s.flush("remote resolved",e),i}catch(i){s.error(i)}s.flush("remote could not be resolved",e)}async cache(t,e){if(!e.startsWith("http"))return this.#t.debug("remotes should at least start with http"),e;const s=this.#t.group();try{s.debug("Caching",{notepath:t,remote:e});const i=await this.#a({notepath:t,remote:e},s);if(!i){s.debug("remote could not be resolved"),s.flush("remote was not cached",e);return}const n=this.#e.getFileByPath(i);if(n)return s.flush("remote is already in cache",e),this.#e.getResourcePath(n);const a=await Ae(e,s);await this.#e.adapter.mkdir(D.getParent(i)??"/"),await this.#e.createBinary(i,a);const o=this.#e.getFileByPath(i);if(o)return s.flush("remote was cached",e),this.#e.getResourcePath(o)}catch(i){s.error(i)}s.flush("remote could not be cached",e)}#i(t,e){e.debug("searching an active cache rule");const s=this.#n.state.cache_matchers.find(i=>i.testPath(t.notepath));if(!s?.isEnabled()){e.debug("notepath does not match and active rule");return}if(this.#n.state.url_ignore_matcher(t.remote)){e.debug("remote has to be ignored (URL param)");return}if(this.#n.state.url_cache_matcher(t.remote))return e.debug("remote has to be cached (URL param)"),s;if(this.#n.state.note_ignore_matcher(t.notepath,t.remote)){e.debug("remote has to be ignored (Frontmatter attribute)");return}if(this.#n.state.note_cache_matcher(t.notepath,t.remote))return e.debug("remote has to be cached (Frontmatter attribute)"),s;if(s.testRemote(t.remote))return e.debug("remote matches an active rule"),s;e.debug("remote does not match and active rule")}async#a(t,e){const s=J.getBaseurl(t.remote);if(!s)throw e.debug("remote is not a valid URL"),new k("remote-no-url",`remote(${t.remote})`);const i=this.#s.get(s);if(i)return e.debug("remote resolved from cache",i),i;const n=this.#i(t,e);if(!n){e.debug("a cache rule could not be matched");return}const a=D.getBasename(s),o=D.getExt(s)??await De(t.remote,e);if(!a||!o)throw e.debug(`name(${a}) or ext(${o}) could not be resolved`),new k("remote-no-ext");const h=D.join(n.resolve(t.notepath),a+"."+o),c=this.#n.settings.allow_characters?E.normalizePath(h):E.normalizePath(D.normalize(h));return this.#s.set(s,c),e.debug("remote resolved",c),c}}const vt={plugin_level:"WARN",plugin_priority:"NORMAL",allow_characters:!1,url_param_cache:"cache_file",url_param_ignore:"ignore_file",note_param_cache:"cache_from",note_param_ignore:"cache_unless",cache_configs:[{pattern:"*",remotes:[{whitelisted:!1,pattern:"*"}],enabled:!1,target:"",mode:"NOTE"}]};class K extends E.Plugin{log=B.consoleLogger(K.name);settings={};state={};api;markdown;constructor(t,e){super(t,e),this.log.setLevel(S.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new Y(this),this.markdown=new Ge(this),window.AttachmentsCache=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new Fe(this)),this.markdown.registerMarkdownProcessor()}onunload(){delete window.AttachmentsCache}async loadSettings(){const t=this.log.group("Loading Settings"),{cache_configs:e,...s}=await this.loadData()||{};this.settings=Object.assign({},vt,s),this.settings.cache_configs=V([...e??[],...vt.cache_configs]),t.debug("Loaded: ",this.settings),this.#t(t),t.flush("Loaded Settings")}async saveSettings(){const t=this.log.group("Saving Settings"),e=Object.assign({},this.settings);e.cache_configs=V(e.cache_configs),await this.saveData(e),t.debug("Saved: ",e),this.#t(t),t.flush("Saved Settings")}#t(t){t.info("Preparing state"),this.log.setLevel(S[this.settings.plugin_level]),this.markdown.syncPriority(),this.state=Oe(this)}}module.exports=K;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
