/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-attachments-cache@1.3.4 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-attachments-cache
 */
"use strict";var yt=Object.defineProperty;var h=(r,t)=>yt(r,"name",{value:t,configurable:!0});Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const R=require("obsidian");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.3.5 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class St{static{h(this,"pt")}error(t,e){console.error(t,...e)}warn(t,e){console.warn(t,...e)}info(t,e){console.info(t,...e)}debug(t,e){console.debug(t,...e)}trace(t,e){console.trace(t,...e)}group(t,e){return console.groupCollapsed(t,...e),console.groupEnd}}const v=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),xt=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class _{static{h(this,"V")}#t;#e;#r;#s=[];#i=[];get level(){return this.#e?this.#e:this.#t?.level??v.WARN}get format(){return this.#r?this.#r:this.#t?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const t=[];for(let e=0;e<this.#i.length-1;e++)t.push(this.#i[e][0]);return t.push(this.#i.at(-1)??""),t.join(".")}get drivers(){return Object.freeze(this.#s)}setLevel(t){return this.#e=t,this}setFormat(t){return this.#r=t,this}addDrivers(...t){for(const e of t)Array.isArray(e)?this.#s.push(...e):e&&this.#s.push(e);return this}addNamespaces(...t){for(const e of t)Array.isArray(e)?this.#i.push(...e):e&&this.#i.push(e);return this}static consoleLogger(t){const e=new _;return e.setLevel(v.WARN),e.addDrivers(new St),e.addNamespaces(t),e}make(t){const e=new _;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i,t),e}prefix(t,e){return this.format.replace("hh",String(t.getHours()).padStart(2,"0")).replace("mm",String(t.getMinutes()).padStart(2,"0")).replace("ss",String(t.getSeconds()).padStart(2,"0")).replace("ms",String(t.getMilliseconds()).padStart(3,"0")).replace("level",xt[e]).replace("namespace",this.namespace)}log(t,e,s){if(this.level>e)return;const i=this.prefix(t,e);switch(this.level){case v.ERROR:this.#s.forEach(n=>n.error(i,s));break;case v.WARN:this.#s.forEach(n=>n.warn(i,s));break;case v.INFO:this.#s.forEach(n=>n.info(i,s));break;case v.DEBUG:this.#s.forEach(n=>n.debug(i,s));break;default:this.#s.forEach(n=>n.trace(i,s))}}error(...t){this.log(new Date,v.ERROR,t)}warn(...t){this.log(new Date,v.WARN,t)}info(...t){this.log(new Date,v.INFO,t)}debug(...t){this.log(new Date,v.DEBUG,t)}trace(...t){this.log(new Date,v.TRACE,t)}group(...t){const e=new Tt;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i),e.log(new Date,v.INFO,t),e}}class Tt extends _{static{h(this,"mt")}#t=[];log(t,e,s){this.level>e||this.#t.push({timestamp:t,level:e,content:s})}flush(...t){const e=this.prefix(new Date,v.INFO),s=this.drivers.map(i=>i.group(e,t));for(const{timestamp:i,level:n,content:a}of this.#t)super.log(i,n,a);s.forEach(i=>i()),this.#t=[]}}class T{static{h(this,"Jt")}static join(...t){return t.reduce((e,s)=>s?e?e.replace(/[\\/]+$/gi,"")+"/"+s.replace(/^[\\/]+/gi,""):s:e,"")}static normalize(t){return t.replaceAll(/[^\w-\\/#?&=':,. ]+/gi,"_")}static getName(t){return t.match(/[^\\/]+$/gi)?.at(0)}static getBasename(t){const e=this.getName(t);return e?this.removeExt(e):void 0}static getParent(t){return t.replace(/[\\/][^\\/]*$/gi,"")}static hasExt(t){return/\.[^\\/]*$/gi.test(t)}static getExt(t){return/(?<=\.)([^\\/#?]*)([#?].*)?$/gi.exec(t)?.at(1)}static removeExt(t){return t.replace(/(\.[^\\/]*)?([#?].*)?$/gi,"")}}class I{static{h(this,"Qt")}static isUrl(t){return/^https?:\/\//gi.test(t)}static getOrigin(t){return/^https?:\/\/[^\\/]+/gi.exec(t)?.at(0)}static getBaseurl(t){return/^https?:\/\/[^#?]*/gi.exec(t)?.at(0)}static getHash(t){return/(?<=#)[^?]*/gi.exec(t)?.at(0)}static getparams(t){return/(?<=\?).*/gi.exec(t)?.at(0)}}class A extends Error{static{h(this,"AttachmentError")}constructor(t,e){super(),this.code=t,this.cause=e,this.name=`AttachmentError(${this.code})`,this.message=this.toStringMessage()}static assertResponse(t,e,s){if(!(e.status<400))throw new A(s,`requested url: ${t}
response status: ${e.status}
response headers:
${JSON.stringify(e.headers)}`)}toString(){return`${this.name}: ${this.toStringMessage()}`}toStringMessage(){const t=A.#t(this.code);return this.cause?this.cause instanceof Error?`${t}, context:

${this.cause}`:`${t}, context:

${JSON.stringify(this.cause)}`:t}static#t(t){switch(t){case"remote-no-url":return"remote param should be an URL";case"remote-no-ext":return"a file-extension could not be determined";case"url-request-head":return"the request to get the file-extension failed";case"url-request-get":return"the request to download the file failed";default:return"try-reloading Obsidian"}}}function z(r,t){return!r.startsWith("*")&&t.startsWith("*")?-1:r.startsWith("*")&&!t.startsWith("*")?1:r.startsWith(t)?-1:t.startsWith(r)?1:r.localeCompare(t,"en")}h(z,"compareBySpecificity");function Rt(r){switch(r){case"image/jpeg":return"jpg";case"image/tiff":return"tif";default:return r.split(/\/|\+/gi)[1]}}h(Rt,"getMimeExt");function Ot(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}h(Ot,"getDefaultExportFromCjs");var Nt=ht;function ht(r,t,e){r instanceof RegExp&&(r=K(r,e)),t instanceof RegExp&&(t=K(t,e));var s=ct(r,t,e);return s&&{start:s[0],end:s[1],pre:e.slice(0,s[0]),body:e.slice(s[0]+r.length,s[1]),post:e.slice(s[1]+t.length)}}h(ht,"balanced$1");function K(r,t){var e=t.match(r);return e?e[0]:null}h(K,"maybeMatch");ht.range=ct;function ct(r,t,e){var s,i,n,a,o,c=e.indexOf(r),l=e.indexOf(t,c+1),u=c;if(c>=0&&l>0){if(r===t)return[c,l];for(s=[],n=e.length;u>=0&&!o;)u==c?(s.push(u),c=e.indexOf(r,u+1)):s.length==1?o=[s.pop(),l]:(i=s.pop(),i<n&&(n=i,a=l),l=e.indexOf(t,u+1)),u=c<l&&c>=0?c:l;s.length&&(o=[n,a])}return o}h(ct,"range");var lt=Nt,Dt=At,ut="\0SLASH"+Math.random()+"\0",pt="\0OPEN"+Math.random()+"\0",U="\0CLOSE"+Math.random()+"\0",ft="\0COMMA"+Math.random()+"\0",dt="\0PERIOD"+Math.random()+"\0";function B(r){return parseInt(r,10)==r?parseInt(r,10):r.charCodeAt(0)}h(B,"numeric");function $t(r){return r.split("\\\\").join(ut).split("\\{").join(pt).split("\\}").join(U).split("\\,").join(ft).split("\\.").join(dt)}h($t,"escapeBraces");function Ct(r){return r.split(ut).join("\\").split(pt).join("{").split(U).join("}").split(ft).join(",").split(dt).join(".")}h(Ct,"unescapeBraces");function gt(r){if(!r)return[""];var t=[],e=lt("{","}",r);if(!e)return r.split(",");var s=e.pre,i=e.body,n=e.post,a=s.split(",");a[a.length-1]+="{"+i+"}";var o=gt(n);return n.length&&(a[a.length-1]+=o.shift(),a.push.apply(a,o)),t.push.apply(t,a),t}h(gt,"parseCommaParts");function At(r){return r?(r.substr(0,2)==="{}"&&(r="\\{\\}"+r.substr(2)),k($t(r),!0).map(Ct)):[]}h(At,"expandTop");function Mt(r){return"{"+r+"}"}h(Mt,"embrace");function Pt(r){return/^-?0\d/.test(r)}h(Pt,"isPadded");function kt(r,t){return r<=t}h(kt,"lte");function jt(r,t){return r>=t}h(jt,"gte");function k(r,t){var e=[],s=lt("{","}",r);if(!s)return[r];var i=s.pre,n=s.post.length?k(s.post,!1):[""];if(/\$$/.test(s.pre))for(var a=0;a<n.length;a++){var o=i+"{"+s.body+"}"+n[a];e.push(o)}else{var c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),l=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),u=c||l,g=s.body.indexOf(",")>=0;if(!u&&!g)return s.post.match(/,.*\}/)?(r=s.pre+"{"+s.body+U+s.post,k(r)):[r];var p;if(u)p=s.body.split(/\.\./);else if(p=gt(s.body),p.length===1&&(p=k(p[0],!1).map(Mt),p.length===1))return n.map(function(bt){return s.pre+p[0]+bt});var f;if(u){var m=B(p[0]),d=B(p[1]),b=Math.max(p[0].length,p[1].length),O=p.length==3?Math.abs(B(p[2])):1,M=kt,N=d<m;N&&(O*=-1,M=jt);var D=p.some(Pt);f=[];for(var $=m;M($,d);$+=O){var y;if(l)y=String.fromCharCode($),y==="\\"&&(y="");else if(y=String($),D){var J=b-y.length;if(J>0){var Z=new Array(J+1).join("0");$<0?y="-"+Z+y.slice(1):y=Z+y}}f.push(y)}}else{f=[];for(var C=0;C<p.length;C++)f.push.apply(f,k(p[C],!1))}for(var C=0;C<f.length;C++)for(var a=0;a<n.length;a++){var o=i+f[C]+n[a];(!t||u||o)&&e.push(o)}}return e}h(k,"expand");const _t=Ot(Dt),Lt=1024*64,L=h(r=>{if(typeof r!="string")throw new TypeError("invalid pattern");if(r.length>Lt)throw new TypeError("pattern is too long")},"assertValidPattern"),Wt={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},P=h(r=>r.replace(/[[\]\\-]/g,"\\$&"),"braceEscape"),Bt=h(r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regexpEscape"),Q=h(r=>r.join(""),"rangesToString"),Ft=h((r,t)=>{const e=t;if(r.charAt(e)!=="[")throw new Error("not in a brace expression");const s=[],i=[];let n=e+1,a=!1,o=!1,c=!1,l=!1,u=e,g="";t:for(;n<r.length;){const d=r.charAt(n);if((d==="!"||d==="^")&&n===e+1){l=!0,n++;continue}if(d==="]"&&a&&!c){u=n+1;break}if(a=!0,d==="\\"&&!c){c=!0,n++;continue}if(d==="["&&!c){for(const[b,[O,M,N]]of Object.entries(Wt))if(r.startsWith(b,n)){if(g)return["$.",!1,r.length-e,!0];n+=b.length,N?i.push(O):s.push(O),o=o||M;continue t}}if(c=!1,g){d>g?s.push(P(g)+"-"+P(d)):d===g&&s.push(P(d)),g="",n++;continue}if(r.startsWith("-]",n+1)){s.push(P(d+"-")),n+=2;continue}if(r.startsWith("-",n+1)){g=d,n+=2;continue}s.push(P(d)),n++}if(u<n)return["",!1,0,!1];if(!s.length&&!i.length)return["$.",!1,r.length-e,!0];if(i.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!l){const d=s[0].length===2?s[0].slice(-1):s[0];return[Bt(d),!1,u-e,!1]}const p="["+(l?"^":"")+Q(s)+"]",f="["+(l?"":"^")+Q(i)+"]";return[s.length&&i.length?"("+p+"|"+f+")":s.length?p:f,o,u-e,!0]},"parseClass"),j=h((r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/\[([^\/\\])\]/g,"$1"):r.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1"),"unescape"),Gt=new Set(["!","?","+","*","@"]),X=h(r=>Gt.has(r),"isExtglobType"),It="(?!(?:^|/)\\.\\.?(?:$|/))",F="(?!\\.)",zt=new Set(["[","."]),Ut=new Set(["..","."]),qt=new Set("().*{}+?[]^$\\!"),Ht=h(r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regExpEscape$1"),q="[^/]",Y=q+"*?",tt=q+"+?";class E{static{h(this,"AST")}type;#t;#e;#r=!1;#s=[];#i;#a;#c;#h=!1;#n;#o;#d=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#i=e,this.#t=this.#i?this.#i.#t:this,this.#n=this.#t===this?s:this.#t.#n,this.#c=this.#t===this?[]:this.#t.#c,t==="!"&&!this.#t.#h&&this.#c.push(this),this.#a=this.#i?this.#i.#s.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(const t of this.#s)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#o!==void 0?this.#o:this.type?this.#o=this.type+"("+this.#s.map(t=>String(t)).join("|")+")":this.#o=this.#s.map(t=>String(t)).join("")}#u(){if(this!==this.#t)throw new Error("should only call on root");if(this.#h)return this;this.toString(),this.#h=!0;let t;for(;t=this.#c.pop();){if(t.type!=="!")continue;let e=t,s=e.#i;for(;s;){for(let i=e.#a+1;!s.type&&i<s.#s.length;i++)for(const n of t.#s){if(typeof n=="string")throw new Error("string part in extglob AST??");n.copyIn(s.#s[i])}e=s,s=e.#i}}return this}push(...t){for(const e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof E&&e.#i===this))throw new Error("invalid part: "+e);this.#s.push(e)}}toJSON(){const t=this.type===null?this.#s.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#s.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#h&&this.#i?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#i?.isStart())return!1;if(this.#a===0)return!0;const t=this.#i;for(let e=0;e<this.#a;e++){const s=t.#s[e];if(!(s instanceof E&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#i?.type==="!")return!0;if(!this.#i?.isEnd())return!1;if(!this.type)return this.#i?.isEnd();const t=this.#i?this.#i.#s.length:0;return this.#a===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){const e=new E(this.type,t);for(const s of this.#s)e.copyIn(s);return e}static#l(t,e,s,i){let n=!1,a=!1,o=-1,c=!1;if(e.type===null){let f=s,m="";for(;f<t.length;){const d=t.charAt(f++);if(n||d==="\\"){n=!n,m+=d;continue}if(a){f===o+1?(d==="^"||d==="!")&&(c=!0):d==="]"&&!(f===o+2&&c)&&(a=!1),m+=d;continue}else if(d==="["){a=!0,o=f,c=!1,m+=d;continue}if(!i.noext&&X(d)&&t.charAt(f)==="("){e.push(m),m="";const b=new E(d,e);f=E.#l(t,b,f,i),e.push(b);continue}m+=d}return e.push(m),f}let l=s+1,u=new E(null,e);const g=[];let p="";for(;l<t.length;){const f=t.charAt(l++);if(n||f==="\\"){n=!n,p+=f;continue}if(a){l===o+1?(f==="^"||f==="!")&&(c=!0):f==="]"&&!(l===o+2&&c)&&(a=!1),p+=f;continue}else if(f==="["){a=!0,o=l,c=!1,p+=f;continue}if(X(f)&&t.charAt(l)==="("){u.push(p),p="";const m=new E(f,u);u.push(m),l=E.#l(t,m,l,i);continue}if(f==="|"){u.push(p),p="",g.push(u),u=new E(null,e);continue}if(f===")")return p===""&&e.#s.length===0&&(e.#d=!0),u.push(p),p="",e.push(...g,u),l;p+=f}return e.type=null,e.#e=void 0,e.#s=[t.substring(s-1)],l}static fromGlob(t,e={}){const s=new E(null,void 0,e);return E.#l(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();const t=this.toString(),[e,s,i,n]=this.toRegExpSource();if(!(i||this.#e||this.#n.nocase&&!this.#n.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;const o=(this.#n.nocase?"i":"")+(n?"u":"");return Object.assign(new RegExp(`^${e}$`,o),{_src:e,_glob:t})}get options(){return this.#n}toRegExpSource(t){const e=t??!!this.#n.dot;if(this.#t===this&&this.#u(),!this.type){const c=this.isStart()&&this.isEnd(),l=this.#s.map(f=>{const[m,d,b,O]=typeof f=="string"?E.#g(f,this.#e,c):f.toRegExpSource(t);return this.#e=this.#e||b,this.#r=this.#r||O,m}).join("");let u="";if(this.isStart()&&typeof this.#s[0]=="string"&&!(this.#s.length===1&&Ut.has(this.#s[0]))){const m=zt,d=e&&m.has(l.charAt(0))||l.startsWith("\\.")&&m.has(l.charAt(2))||l.startsWith("\\.\\.")&&m.has(l.charAt(4)),b=!e&&!t&&m.has(l.charAt(0));u=d?It:b?F:""}let g="";return this.isEnd()&&this.#t.#h&&this.#i?.type==="!"&&(g="(?:$|\\/)"),[u+l+g,j(l),this.#e=!!this.#e,this.#r]}const s=this.type==="*"||this.type==="+",i=this.type==="!"?"(?:(?!(?:":"(?:";let n=this.#p(e);if(this.isStart()&&this.isEnd()&&!n&&this.type!=="!"){const c=this.toString();return this.#s=[c],this.type=null,this.#e=void 0,[c,j(this.toString()),!1,!1]}let a=!s||t||e?"":this.#p(!0);a===n&&(a=""),a&&(n=`(?:${n})(?:${a})*?`);let o="";if(this.type==="!"&&this.#d)o=(this.isStart()&&!e?F:"")+tt;else{const c=this.type==="!"?"))"+(this.isStart()&&!e&&!t?F:"")+Y+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&a?")":this.type==="*"&&a?")?":`)${this.type}`;o=i+n+c}return[o,j(n),this.#e=!!this.#e,this.#r]}#p(t){return this.#s.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");const[s,i,n,a]=e.toRegExpSource(t);return this.#r=this.#r||a,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#g(t,e,s=!1){let i=!1,n="",a=!1;for(let o=0;o<t.length;o++){const c=t.charAt(o);if(i){i=!1,n+=(qt.has(c)?"\\":"")+c;continue}if(c==="\\"){o===t.length-1?n+="\\\\":i=!0;continue}if(c==="["){const[l,u,g,p]=Ft(t,o);if(g){n+=l,a=a||u,o+=g-1,e=e||p;continue}}if(c==="*"){s&&t==="*"?n+=tt:n+=Y,e=!0;continue}if(c==="?"){n+=q,e=!0;continue}n+=Ht(c)}return[n,j(t),!!e,a]}}const Vt=h((r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/[?*()[\]]/g,"[$&]"):r.replace(/[?*()[\]\\]/g,"\\$&"),"escape"),w=h((r,t,e={})=>(L(t),!e.nocomment&&t.charAt(0)==="#"?!1:new W(t,e).match(r)),"minimatch"),Jt=/^\*+([^+@!?\*\[\(]*)$/,Zt=h(r=>t=>!t.startsWith(".")&&t.endsWith(r),"starDotExtTest"),Kt=h(r=>t=>t.endsWith(r),"starDotExtTestDot"),Qt=h(r=>(r=r.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(r)),"starDotExtTestNocase"),Xt=h(r=>(r=r.toLowerCase(),t=>t.toLowerCase().endsWith(r)),"starDotExtTestNocaseDot"),Yt=/^\*+\.\*+$/,te=h(r=>!r.startsWith(".")&&r.includes("."),"starDotStarTest"),ee=h(r=>r!=="."&&r!==".."&&r.includes("."),"starDotStarTestDot"),se=/^\.\*+$/,ie=h(r=>r!=="."&&r!==".."&&r.startsWith("."),"dotStarTest"),re=/^\*+$/,ne=h(r=>r.length!==0&&!r.startsWith("."),"starTest"),ae=h(r=>r.length!==0&&r!=="."&&r!=="..","starTestDot"),oe=/^\?+([^+@!?\*\[\(]*)?$/,he=h(([r,t=""])=>{const e=mt([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},"qmarksTestNocase"),ce=h(([r,t=""])=>{const e=wt([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},"qmarksTestNocaseDot"),le=h(([r,t=""])=>{const e=wt([r]);return t?s=>e(s)&&s.endsWith(t):e},"qmarksTestDot"),ue=h(([r,t=""])=>{const e=mt([r]);return t?s=>e(s)&&s.endsWith(t):e},"qmarksTest"),mt=h(([r])=>{const t=r.length;return e=>e.length===t&&!e.startsWith(".")},"qmarksTestNoExt"),wt=h(([r])=>{const t=r.length;return e=>e.length===t&&e!=="."&&e!==".."},"qmarksTestNoExtDot"),Et=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",et={win32:{sep:"\\"},posix:{sep:"/"}},pe=Et==="win32"?et.win32.sep:et.posix.sep;w.sep=pe;const x=Symbol("globstar **");w.GLOBSTAR=x;const fe="[^/]",de=fe+"*?",ge="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",me="(?:(?!(?:\\/|^)\\.).)*?",we=h((r,t={})=>e=>w(e,r,t),"filter");w.filter=we;const S=h((r,t={})=>Object.assign({},r,t),"ext"),Ee=h(r=>{if(!r||typeof r!="object"||!Object.keys(r).length)return w;const t=w;return Object.assign(h((s,i,n={})=>t(s,i,S(r,n)),"m"),{Minimatch:class extends t.Minimatch{static{h(this,"Minimatch")}constructor(i,n={}){super(i,S(r,n))}static defaults(i){return t.defaults(S(r,i)).Minimatch}},AST:class extends t.AST{static{h(this,"AST")}constructor(i,n,a={}){super(i,n,S(r,a))}static fromGlob(i,n={}){return t.AST.fromGlob(i,S(r,n))}},unescape:h((s,i={})=>t.unescape(s,S(r,i)),"unescape"),escape:h((s,i={})=>t.escape(s,S(r,i)),"escape"),filter:h((s,i={})=>t.filter(s,S(r,i)),"filter"),defaults:h(s=>t.defaults(S(r,s)),"defaults"),makeRe:h((s,i={})=>t.makeRe(s,S(r,i)),"makeRe"),braceExpand:h((s,i={})=>t.braceExpand(s,S(r,i)),"braceExpand"),match:h((s,i,n={})=>t.match(s,i,S(r,n)),"match"),sep:t.sep,GLOBSTAR:x})},"defaults");w.defaults=Ee;const vt=h((r,t={})=>(L(r),t.nobrace||!/\{(?:(?!\{).)*\}/.test(r)?[r]:_t(r)),"braceExpand");w.braceExpand=vt;const ve=h((r,t={})=>new W(r,t).makeRe(),"makeRe");w.makeRe=ve;const be=h((r,t,e={})=>{const s=new W(t,e);return r=r.filter(i=>s.match(i)),s.options.nonull&&!r.length&&r.push(t),r},"match");w.match=be;const st=/[?*]|[+@!]\(.*?\)|\[|\]/,ye=h(r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regExpEscape");class W{static{h(this,"Minimatch")}options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){L(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||Et,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const t of this.set)for(const e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...n)=>console.error(...n)),this.debug(this.pattern,this.globSet);const s=this.globSet.map(n=>this.slashSplit(n));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let i=this.globParts.map((n,a,o)=>{if(this.isWindows&&this.windowsNoMagicRoot){const c=n[0]===""&&n[1]===""&&(n[2]==="?"||!st.test(n[2]))&&!st.test(n[3]),l=/^[a-z]:/i.test(n[0]);if(c)return[...n.slice(0,4),...n.slice(4).map(u=>this.parse(u))];if(l)return[n[0],...n.slice(1).map(u=>this.parse(u))]}return n.map(c=>this.parse(c))});if(this.debug(this.pattern,i),this.set=i.filter(n=>n.indexOf(!1)===-1),this.isWindows)for(let n=0;n<this.set.length;n++){const a=this.set[n];a[0]===""&&a[1]===""&&this.globParts[n][2]==="?"&&typeof a[3]=="string"&&/^[a-z]:$/i.test(a[3])&&(a[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]==="**"&&(t[s][i]="*");const{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let i=s;for(;e[i+1]==="**";)i++;i!==s&&e.splice(s,i-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,i)=>{const n=s[s.length-1];return i==="**"&&n==="**"?s:i===".."&&n&&n!==".."&&n!=="."&&n!=="**"?(s.pop(),s):(s.push(i),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let i=1;i<t.length-1;i++){const n=t[i];i===1&&n===""&&t[0]===""||(n==="."||n==="")&&(e=!0,t.splice(i,1),i--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){const i=t[s-1];i&&i!=="."&&i!==".."&&i!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let i=-1;for(;(i=s.indexOf("**",i+1))!==-1;){let a=i;for(;s[a+1]==="**";)a++;a>i&&s.splice(i+1,a-i);let o=s[i+1];const c=s[i+2],l=s[i+3];if(o!==".."||!c||c==="."||c===".."||!l||l==="."||l==="..")continue;e=!0,s.splice(i,1);const u=s.slice(0);u[i]="**",t.push(u),i--}if(!this.preserveMultipleSlashes){for(let a=1;a<s.length-1;a++){const o=s[a];a===1&&o===""&&s[0]===""||(o==="."||o==="")&&(e=!0,s.splice(a,1),a--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let n=0;for(;(n=s.indexOf("..",n+1))!==-1;){const a=s[n-1];if(a&&a!=="."&&a!==".."&&a!=="**"){e=!0;const c=n===1&&s[n+1]==="**"?["."]:[];s.splice(n-1,2,...c),s.length===0&&s.push(""),n-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){const i=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(i){t[e]=[],t[s]=i;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let i=0,n=0,a=[],o="";for(;i<t.length&&n<e.length;)if(t[i]===e[n])a.push(o==="b"?e[n]:t[i]),i++,n++;else if(s&&t[i]==="**"&&e[n]===t[i+1])a.push(t[i]),i++;else if(s&&e[n]==="**"&&t[i]===e[n+1])a.push(e[n]),n++;else if(t[i]==="*"&&e[n]&&(this.options.dot||!e[n].startsWith("."))&&e[n]!=="**"){if(o==="b")return!1;o="a",a.push(t[i]),i++,n++}else if(e[n]==="*"&&t[i]&&(this.options.dot||!t[i].startsWith("."))&&t[i]!=="**"){if(o==="a")return!1;o="b",a.push(e[n]),i++,n++}else return!1;return t.length===e.length&&a}parseNegate(){if(this.nonegate)return;const t=this.pattern;let e=!1,s=0;for(let i=0;i<t.length&&t.charAt(i)==="!";i++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){const i=this.options;if(this.isWindows){const d=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),b=!d&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),O=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),M=!O&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),N=b?3:d?0:void 0,D=M?3:O?0:void 0;if(typeof N=="number"&&typeof D=="number"){const[$,y]=[t[N],e[D]];$.toLowerCase()===y.toLowerCase()&&(e[D]=$,D>N?e=e.slice(D):N>D&&(t=t.slice(N)))}}const{optimizationLevel:n=1}=this.options;n>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var a=0,o=0,c=t.length,l=e.length;a<c&&o<l;a++,o++){this.debug("matchOne loop");var u=e[o],g=t[a];if(this.debug(e,u,g),u===!1)return!1;if(u===x){this.debug("GLOBSTAR",[e,u,g]);var p=a,f=o+1;if(f===l){for(this.debug("** at the end");a<c;a++)if(t[a]==="."||t[a]===".."||!i.dot&&t[a].charAt(0)===".")return!1;return!0}for(;p<c;){var m=t[p];if(this.debug(`
globstar while`,t,p,e,f,m),this.matchOne(t.slice(p),e.slice(f),s))return this.debug("globstar found match!",p,c,m),!0;if(m==="."||m===".."||!i.dot&&m.charAt(0)==="."){this.debug("dot detected!",t,p,e,f);break}this.debug("globstar swallow a segment, and continue"),p++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,p,e,f),p===c))}let d;if(typeof u=="string"?(d=g===u,this.debug("string match",u,g,d)):(d=u.test(g),this.debug("pattern match",u,g,d)),!d)return!1}if(a===c&&o===l)return!0;if(a===c)return s;if(o===l)return a===c-1&&t[a]==="";throw new Error("wtf?")}braceExpand(){return vt(this.pattern,this.options)}parse(t){L(t);const e=this.options;if(t==="**")return x;if(t==="")return"";let s,i=null;(s=t.match(re))?i=e.dot?ae:ne:(s=t.match(Jt))?i=(e.nocase?e.dot?Xt:Qt:e.dot?Kt:Zt)(s[1]):(s=t.match(oe))?i=(e.nocase?e.dot?ce:he:e.dot?le:ue)(s):(s=t.match(Yt))?i=e.dot?ee:te:(s=t.match(se))&&(i=ie);const n=E.fromGlob(t,this.options).toMMPattern();return i&&typeof n=="object"&&Reflect.defineProperty(n,"test",{value:i}),n}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,s=e.noglobstar?de:e.dot?ge:me,i=new Set(e.nocase?["i"]:[]);let n=t.map(c=>{const l=c.map(u=>{if(u instanceof RegExp)for(const g of u.flags.split(""))i.add(g);return typeof u=="string"?ye(u):u===x?x:u._src});return l.forEach((u,g)=>{const p=l[g+1],f=l[g-1];u!==x||f===x||(f===void 0?p!==void 0&&p!==x?l[g+1]="(?:\\/|"+s+"\\/)?"+p:l[g]=s:p===void 0?l[g-1]=f+"(?:\\/|"+s+")?":p!==x&&(l[g-1]=f+"(?:\\/|\\/"+s+"\\/)"+p,l[g+1]=x))}),l.filter(u=>u!==x).join("/")}).join("|");const[a,o]=t.length>1?["(?:",")"]:["",""];n="^"+a+n+o+"$",this.negate&&(n="^(?!"+n+").+$");try{this.regexp=new RegExp(n,[...i].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;const s=this.options;this.isWindows&&(t=t.split("\\").join("/"));const i=this.slashSplit(t);this.debug(this.pattern,"split",i);const n=this.set;this.debug(this.pattern,"set",n);let a=i[i.length-1];if(!a)for(let o=i.length-2;!a&&o>=0;o--)a=i[o];for(let o=0;o<n.length;o++){const c=n[o];let l=i;if(s.matchBase&&c.length===1&&(l=[a]),this.matchOne(l,c,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return w.defaults(t).Minimatch}}w.AST=E;w.Minimatch=W;w.escape=Vt;w.unescape=j;function it(r){const t=[];let e=!1;for(const s of r)t.every(i=>i.pattern!==s.pattern)&&(s.pattern==="*"&&(e=!0),t.push(s));return e||t.push({pattern:"*",whitelisted:!1}),t.sort((s,i)=>z(s.pattern,i.pattern))}h(it,"prepareRemotes");function rt(r){return r.map(({whitelisted:t,pattern:e})=>`${t?"w":"b"} ${e}`).join(`
`)}h(rt,"serializeRemotes");function Se(r){if(!/\s+/.test(r))return[r,void 0];const t=r.split(/\s+/g);return t[0].startsWith("w")?[t[1],!0]:t[0].startsWith("b")?[t[1],!1]:[t[1],void 0]}h(Se,"parseRemote");function xe(r,t){const e=[];let s=!1;for(const i of t.split(/\n+/g)){const[n,a]=Se(i);if(n==="*"&&(s=!0),!e.some(o=>o.pattern===n)){if(a!==void 0){e.push({pattern:n,whitelisted:a});continue}for(const o of r){if(n===o.pattern){e.push({pattern:n,whitelisted:o.whitelisted});break}if(Math.abs(n.length-o.pattern.length)===1){if(o.pattern.startsWith(n)){e.push({pattern:n,whitelisted:o.whitelisted});break}else if(n.startsWith(o.pattern)){e.push({pattern:n,whitelisted:o.whitelisted});break}}}e.some(o=>o.pattern===n)||e.push({pattern:n,whitelisted:!1})}}return s||e.push({pattern:"*",whitelisted:!1}),e.sort((i,n)=>z(i.pattern,n.pattern))}h(xe,"parseRemotes");function Te(r){const t=[];let e=!1;for(const s of r.split(/\n+/g)){const i=s.trim().replace(/^[wb]\s+/,"");if(i==="*"){e=!0;continue}/^\w+:/gi.test(i)&&t.push("remove protocols, ex: 'http://'"),/^(\w+\.)+\w+/.test(i)||t.push("should include domain, ex: 'example.org/path'")}return e||t.unshift("should include a fallback '*'"),t}h(Te,"checkRemotes");function nt(r="fallback_param"){const t=new RegExp("[?&]"+r+"([&=\\s]|$)","i");return e=>t.test(e)}h(nt,"prepareRemoteMatcher");async function Re(r,t){t.debug(`Resolving extension for ${r}`);const e=I.getOrigin(r),s=await R.requestUrl({url:r,throw:!1,method:"HEAD",headers:{Referer:e?e+"/":""}});return A.assertResponse(r,s,"url-request-head"),Rt(s.headers["content-type"])}h(Re,"getRemoteExt");async function Oe(r,t){t.debug(`Downloading ${r}`);const e=I.getOrigin(r),s=await R.requestUrl({url:r,throw:!1,method:"GET",headers:{Referer:e?e+"/":""}});return A.assertResponse(r,s,"url-request-get"),s.arrayBuffer}h(Oe,"getRemoteContent");function Ne(r){return r.map(t=>{let e=h(n=>T.getParent(n),"resolve");switch(t.mode){case"NOTE-FOLDER":e=h(n=>T.join(T.getParent(n),t.target),"resolve");break;case"TARGET-PATH":e=h(n=>T.join(t.target,T.removeExt(n)),"resolve");break;case"TARGET-NOTE":e=h(n=>T.join(t.target,T.getBasename(n)),"resolve");break;case"TARGET":e=h(()=>t.target,"resolve");break}const s=t.pattern!=="*"?n=>w(n,t.pattern):()=>!0,i=h(n=>{for(const{pattern:a,whitelisted:o}of t.remotes)if(a==="*"||new RegExp("^https?://(\\w+\\.)*"+a,"g").test(n))return o;return!1},"testRemote");return{source:Object.freeze(t),isEnabled:h(()=>t.enabled,"isEnabled"),testRemote:i,testPath:s,resolve:e}})}h(Ne,"prepareConfigMatchers");function G(r){const t=[];for(const e of r){const s=t.findIndex(i=>i.pattern===e.pattern);if(s===-1){t.push({...e,remotes:it(e.remotes)});continue}e.remotes.length>t[s].remotes.length&&(t[s]={...e,remotes:it(e.remotes)})}return t.sort((e,s)=>z(e.pattern,s.pattern))}h(G,"prepareConfigs");function De(r,t){if(!t)return["invalid pattern"];for(const e of r)if(e.pattern===t)return[`duplicated pattern '${t}'`];return[]}h(De,"checkPattern");const $e={NOTE:"Attachments next to the Note","NOTE-FOLDER":"Attachments on Subfolder",TARGET:"Attachments on Cache Folder","TARGET-NOTE":"Attachments on Cache Note Folder","TARGET-PATH":"Attachments on Cache Note Path"},at={NOTE:"Store in the same folder as the note","NOTE-FOLDER":"Store next to the note in subfolder ",TARGET:"Store in folder ","TARGET-NOTE":"Store in subfolder with the note-name under ","TARGET-PATH":"Store in a replated note-path under "},Ce=h(({mode:r,target:t})=>{switch(r){case"NOTE":return"folder/img1.jpg";case"NOTE-FOLDER":return`folder/${t}/img1.jpg`;case"TARGET":return`${t}/img1.jpg`;case"TARGET-NOTE":return`${t}/note1/img1.jpg`;case"TARGET-PATH":return`${t}/folder/note1/img1.jpg`}},"modesEx");class Ae{static{h(this,"CacheSettings")}#t;#e;#r;#s;#i;constructor(t,e){this.#t={...e,remotes:[...e.remotes]},this.#e=new R.Setting(t),this.#r=this.#e.settingEl.createDiv("cache-details"),this.#s=this.#e.settingEl.createDiv("cache-remotes"),this.#h(),this.#o(),this.#u()}#a(){return createFragment(t=>{t.append(`${this.#t.enabled?"Enabled":"Disabled"} path: `),t.createEl("code").appendText(this.#t.pattern)})}#c(){return this.#t.mode==="NOTE"?at.NOTE:createFragment(t=>{t.append(at[this.#t.mode]),t.createEl("code").appendText(this.#t.target)})}#h(){this.#e.setName(this.#a()),this.#e.setDesc(this.#c()),this.#t.pattern!=="*"&&this.#e.addExtraButton(t=>{t.setIcon("trash-2").setTooltip("Remove"),t.onClick(()=>{if(this.#t.pattern==="*"){console.warn("fallback config('*') can't be removed");return}this.#e.clear(),this.#e.settingEl.remove(),this.#m()})}),this.#e.addToggle(t=>{t.setValue(this.#t.enabled),t.onChange(e=>{this.#t.enabled=e,this.#f(),this.#e.setName(this.#a())})}),this.#e.addExtraButton(t=>{let e=!1;t.setIcon("chevron-down").setTooltip("Details"),t.onClick(()=>{e=!e,e?(t.setIcon("chevron-up"),this.#e.settingEl.addClass("show-details")):(t.setIcon("chevron-down"),this.#e.settingEl.removeClass("show-details"))})})}#n(){return createFragment(t=>{t.append("Attachments storage path, ex:");const e=t.createEl("ul"),s=e.createEl("li");s.append("Note: '"),s.createEl("b").appendText("folder/note1.md"),s.append("'");const i=e.createEl("li");i.append("Attachment: '"),i.createEl("b").appendText(Ce(this.#t)),i.append("'")})}#o(){let t;const e=new R.Setting(this.#r);e.setName("Attachments Storage"),e.setDesc(this.#n()),e.addDropdown(a=>{a.addOptions($e),a.setValue(this.#t.mode),a.onChange(o=>{this.#t.mode=o,this.#f(),e.setDesc(this.#n()),this.#t.mode==="NOTE"?(t?.setDisabled(!0),t?.setValue("")):(t?.setDisabled(!1),t?.setValue(this.#t.target))})}),e.addText(a=>{t=a,this.#t.mode==="NOTE"?a.setDisabled(!0):a.setValue(this.#t.target),a.onChange(o=>{this.#t.target=o,this.#f(),e.setDesc(this.#n())})});const s=createFragment(),i=s.createEl("ul"),n=new R.Setting(this.#r);n.setClass("remotes-input"),n.setName("Remotes List"),n.setDesc(s),n.addTextArea(a=>{this.#i=a,a.setValue(rt(this.#t.remotes)),a.onChange(o=>{i.empty();const c=Te(o);if(c.length>0){c.forEach(l=>i.createEl("li").appendText(l));return}this.#t.remotes=xe(this.#t.remotes,o),this.#f(),this.#u()})})}#d(t){return createFragment(e=>{e.append(`${t.whitelisted?"Whitelisted":"Blacklisted"} remote: `),e.createEl("code").appendText(t.pattern)})}#u(){this.#s.empty();for(const t of this.#t.remotes){const e=new R.Setting(this.#s);e.setName(this.#d(t)),t.pattern!=="*"&&e.addExtraButton(s=>{s.setIcon("trash-2").setTooltip("Remove"),s.onClick(()=>{const i=this.#t.remotes.filter(n=>n.pattern!==t.pattern);this.#l(i)})}),e.addButton(s=>{s.setButtonText(t.whitelisted?"Blacklist":"Whitelist"),s.onClick(()=>{const i=this.#t.remotes.map(n=>n.pattern!==t.pattern?n:{...n,whitelisted:!n.whitelisted});this.#l(i)})})}}#l(t){this.#t.remotes=t,this.#f(),this.#i?.setValue(rt(t)),this.#u()}#p=[];#g=[];#f(){for(const t of this.#p)t(this.#t)}#m(){for(const t of this.#g)t(this.#t)}onChange(t){return this.#p.push(t),this}onRemove(t){return this.#g.push(t),this}}class Me extends R.PluginSettingTab{static{h(this,"SettingsTab")}#t;#e;#r;constructor(t){super(t.app,t),this.#t=t,this.#e=t.settings}hide(){}display(){this.containerEl.empty(),this.containerEl.addClass("attachments-cache-settings"),this.#a(),this.#s().setName("Paths Settings").setHeading(),this.#c(),this.#r=this.containerEl.createDiv("configs-list"),this.#h()}#s(){return this.#i(this.containerEl)}#i(t){return new R.Setting(t)}#a(){const t=this.#s();t.setName("Keep Special Characters"),t.setDesc("If you are having problems with special characters on paths, disable this setting."),t.addToggle(i=>{i.setValue(this.#e.allow_characters),i.onChange(this.#n.bind(this,"allow_characters"))});const e=this.#s();e.setName("URL Param Cache"),e.setDesc("Overrides standard rules and stores the file."),e.addText(i=>{i.setValue(this.#e.url_param_cache),i.onChange(this.#n.bind(this,"url_param_cache"))});const s=this.#s();s.setName("URL Param Ignore"),s.setDesc("Overrides standard rules and ignores the file."),s.addText(i=>{i.setValue(this.#e.url_param_ignore),i.onChange(this.#n.bind(this,"url_param_ignore"))})}#c(){let t=null,e=null,s=null;const i=createFragment(),n=i.createEl("ul"),a=this.#s();a.setClass("configs-header"),a.setName("Duplicate Vault Path"),a.setDesc(i),a.addText(o=>{t=o,o.setPlaceholder("glob: **/*.md"),o.onChange(c=>{if(n.empty(),!c){s?.setDisabled(!0);return}const l=De(this.#e.cache_configs,c);if(l.length>0){l.forEach(u=>n.createEl("li").appendText(u));return}s?.setDisabled(l.length>0)})}),a.addDropdown(o=>{e=o,o.setValue("*");for(const c of this.#e.cache_configs)o.addOption(c.pattern,c.pattern)}),a.addButton(o=>{s=o,o.setButtonText("Duplicate"),o.setDisabled(!0),o.onClick(()=>{const c=t?.getValue(),l=e?.getValue()??"*",u=this.#e.cache_configs.find(p=>p.pattern===l);if(!c||!u){console.warn("unexpected state");return}const g=this.#e.cache_configs;g.push({pattern:c,remotes:u.remotes,enabled:u.enabled,target:u.target,mode:u.mode}),this.#o(g)})})}#h(){if(this.#r){this.#r.empty();for(const t of this.#e.cache_configs){const e=new Ae(this.#r,t);e.onChange(s=>{const i=this.#e.cache_configs.map(n=>n.pattern===s.pattern?s:n);this.#o(i)}),e.onRemove(s=>{const i=this.#e.cache_configs.filter(n=>n.pattern!==s.pattern);this.#o(i)})}}}#n(t,e){this.#e[t]=e,this.#t.saveSettings()}#o(t){this.#e.cache_configs=G(t),this.#t.saveSettings()}}class Pe{static{h(this,"MarkdownHandler")}constructor(t){this.plugin=t}registerMarkdownProcessor(){this.plugin.registerMarkdownPostProcessor((t,e)=>{t.querySelectorAll("img").forEach(s=>void this.#t(s,e.sourcePath))})}async#t(t,e){const s=await this.plugin.api.cache(e,t.src);s&&(t.src=s)}}class H{static{h(this,"AttachmentsCacheAPI")}log;#t;#e;#r=new Map;constructor(t){this.log=t.log.make(H.name),this.#t=t.app.vault,this.#e=t}mayCache(t,e){return!!this.#s({notepath:t,remote:e},this.log)}async isCached(t,e){const s=await this.resolve(t,e);return s?await this.#t.adapter.exists(s):!1}async resource(t,e){const s=await this.resolve(t,e);if(!s)return;const i=this.#t.getFileByPath(s);return i?this.#t.getResourcePath(i):void 0}async resolve(t,e){const s=this.log.group("Resolving",{notepath:t,remote:e});try{const i=await this.#i({notepath:t,remote:e},s);if(i)return s.flush(`remote resolved to <${i}>`),i}catch(i){s.error(i)}s.flush("remote could not be resolved")}async cache(t,e){const s=this.log.group("Caching",{notepath:t,remote:e});try{const i=await this.#i({notepath:t,remote:e},s);if(!i){s.info("remote could not be resolved"),s.flush("remote was not cached");return}const n=this.#t.getFileByPath(i);if(n)return s.flush("remote is already in cache"),this.#t.getResourcePath(n);const a=await Oe(e,s);await this.#t.adapter.mkdir(T.getParent(i)),await this.#t.adapter.writeBinary(i,a);const o=this.#t.getFileByPath(i);if(o)return s.flush(`remote was cached to <${i}>`),this.#t.getResourcePath(o)}catch(i){s.error(i)}s.flush("remote could not be cached")}#s(t,e){e?.debug("searching an active cache rule");const s=this.#e.state.cache_matchers.find(i=>i.testPath(t.notepath));if(!s?.isEnabled()){e?.debug("notepath does not match and active rule");return}if(this.#e.state.url_ignore_matcher(t.remote)){e?.debug("remote is marked to be ignored");return}if(this.#e.state.url_cache_matcher(t.remote))return e?.debug("remote is marked to be cached"),s;if(s.testRemote(t.remote))return e?.debug("remote matches an active rule"),s;e?.debug("remote does not match and active rule")}async#i(t,e){const s=I.getBaseurl(t.remote);if(!s)throw e.debug("remote is not a valid URL"),new A("remote-no-url",`remote('${t.remote}')`);const i=this.#r.get(s);if(i)return e.debug(`remote resolved from cache <${i}>`),i;const n=this.#s(t,e);if(!n){e.debug("a cache rule could not be matched");return}const a=T.getBasename(s),o=T.getExt(s)??await Re(t.remote,e);if(!a||!o)throw e.debug(`name(${a}) or ext(${o}) could not be resolved`),new A("remote-no-ext");const c=T.join(n.resolve(t.notepath),a+"."+o),l=this.#e.settings.allow_characters?R.normalizePath(c):R.normalizePath(T.normalize(c));return this.#r.set(s,l),e.debug(`remote resolved to <${l}>`),l}}const ot={allow_characters:!1,url_param_cache:"cache_file",url_param_ignore:"ignore_file",cache_configs:[{pattern:"*",remotes:[{whitelisted:!1,pattern:"*"}],enabled:!1,target:"",mode:"NOTE"}]};class V extends R.Plugin{static{h(this,"AttachmentsCachePlugin")}log=_.consoleLogger(V.name);settings={};state={};api;markdown;constructor(t,e){super(t,e),this.log.setFormat("[hh:mm:ss.ms] level:"),this.log.setLevel(v.DEBUG),this.api=new H(this),this.markdown=new Pe(this),window.AttachmentsCache=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new Me(this)),this.markdown.registerMarkdownProcessor()}async loadSettings(){const t=this.log.group("Loading Settings"),{cache_configs:e,...s}=await this.loadData()||{};this.settings=Object.assign({},ot,s),this.settings.cache_configs=G([...e??[],...ot.cache_configs]),t.debug("Loaded: ",this.settings),this.#t(t),t.flush("Loaded Settings")}async saveSettings(){const t=this.log.group("Saving Settings"),e=Object.assign({},this.settings);e.cache_configs=G(e.cache_configs),await this.saveData(e),t.debug("Saved: ",e),this.#t(t),t.flush("Saved Settings")}#t(t){t.info("Preparing state"),this.state={cache_matchers:Ne(this.settings.cache_configs),url_cache_matcher:nt(this.settings.url_param_cache),url_ignore_matcher:nt(this.settings.url_param_ignore)}}}exports.default=V;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
