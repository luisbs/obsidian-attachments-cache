/*!
 * @copyright Copyright (c) 2022-present Luis Brayan
 * @license @luis.bs/obsidian-attachments-cache@0.4.1 is released under the GPL-3.0-or-later license
 * @source https://github.com/luisbs/obsidian-attachments-cache
 */
"use strict";const w=require("obsidian");/*!
 * Copyright (c) 2022-present Luis Brayan
 * @luis.bs/obsidian-fnc@1.4.2 is released under the MIT license
 * @source https://github.com/luisbs/obsidian-fnc
 */class bt{error(t,e){console.error(t,...e)}warn(t,e){console.warn(t,...e)}info(t,e){console.info(t,...e)}debug(t,e){console.debug(t,...e)}trace(t,e){console.trace(t,...e)}group(t,e){return console.groupCollapsed(t,...e),console.groupEnd}}const m=Object.freeze({TRACE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5}),yt=Object.freeze({1:"TRACE",2:"DEBUG",3:" INFO",4:" WARN",5:"ERROR"});class j{#t;#e;#n;#s=[];#i=[];get level(){return this.#e?this.#e:this.#t?.level??m.WARN}get format(){return this.#n?this.#n:this.#t?.format??"[hh:mm:ss.ms] level (namespace):"}get namespace(){const t=[];for(let e=0;e<this.#i.length-1;e++)t.push(this.#i[e][0]);return t.push(this.#i.at(-1)??""),t.join(".")}get drivers(){return Object.freeze(this.#s)}setLevel(t){return this.#e=t,this}setFormat(t){return this.#n=t,this}addDrivers(...t){for(const e of t)Array.isArray(e)?this.#s.push(...e):e&&this.#s.push(e);return this}addNamespaces(...t){for(const e of t)Array.isArray(e)?this.#i.push(...e):e&&this.#i.push(e);return this}static consoleLogger(t){const e=new j;return e.setLevel(m.WARN),e.addDrivers(new bt),e.addNamespaces(t),e}make(t){const e=new j;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i,t),e}prefix(t,e){return this.format.replace("hh",String(t.getHours()).padStart(2,"0")).replace("mm",String(t.getMinutes()).padStart(2,"0")).replace("ss",String(t.getSeconds()).padStart(2,"0")).replace("ms",String(t.getMilliseconds()).padStart(3,"0")).replace("level",yt[e]).replace("namespace",this.namespace)}log(t,e,s){if(this.level>e)return;const n=this.prefix(t,e);switch(this.level){case m.ERROR:this.#s.forEach(i=>i.error(n,s));break;case m.WARN:this.#s.forEach(i=>i.warn(n,s));break;case m.INFO:this.#s.forEach(i=>i.info(n,s));break;case m.DEBUG:this.#s.forEach(i=>i.debug(n,s));break;default:this.#s.forEach(i=>i.trace(n,s))}}error(...t){this.log(new Date,m.ERROR,t)}warn(...t){this.log(new Date,m.WARN,t)}info(...t){this.log(new Date,m.INFO,t)}debug(...t){this.log(new Date,m.DEBUG,t)}trace(...t){this.log(new Date,m.TRACE,t)}group(...t){const e=new St;return e.#t=this,e.addDrivers(this.#s),e.addNamespaces(this.#i),t.length&&e.log(new Date,m.INFO,t),e}}class St extends j{#t=[];log(t,e,s){this.level>e||this.#t.push({timestamp:t,level:e,content:s})}flush(...t){if(this.#t.length===0){super.log(new Date,m.INFO,t);return}const e=this.prefix(new Date,m.INFO),s=this.drivers.map(n=>n.group(e,t));for(const{timestamp:n,level:i,content:a}of this.#t)super.log(n,i,a);s.forEach(n=>n()),this.#t=[]}}class R{static join(...t){return t.reduce((e,s)=>s?e?e.replace(/[\\/]+$/gi,"")+"/"+s.replace(/^[\\/]+/gi,""):s:e,"")}static normalize(t){return t.replaceAll(/[^\w-\\/#?&=':,. ]+/gi,"_")}static getName(t){return t.match(/[^\\/]+$/gi)?.at(0)}static getBasename(t){const e=this.getName(t);return e?this.removeExt(e):void 0}static getParent(t){return t.replace(/[\\/][^\\/]*$/gi,"")}static hasExt(t){return/\.[^\\/]*$/gi.test(t)}static getExt(t){return/(?<=\.)([^\\/#?]*)([#?].*)?$/gi.exec(t)?.at(1)}static removeExt(t){return t.replace(/(\.[^\\/]*)?([#?].*)?$/gi,"")}}class G{static isUrl(t){return/^https?:\/\//gi.test(t)}static getOrigin(t){return/^https?:\/\/[^\\/]+/gi.exec(t)?.at(0)}static getBaseurl(t){return/^https?:\/\/[^#?]*/gi.exec(t)?.at(0)}static getHash(t){return/(?<=#)[^?]*/gi.exec(t)?.at(0)}static getparams(t){return/(?<=\?).*/gi.exec(t)?.at(0)}}class C extends Error{constructor(t,e){super(),this.code=t,this.cause=e,this.name=`AttachmentError(${this.code})`,this.message=this.toStringMessage()}static assertResponse(t,e,s){if(!(e.status<400))throw new C(s,`requested url: ${t}
response status: ${e.status}
response headers:
${JSON.stringify(e.headers)}`)}toString(){return`${this.name}: ${this.toStringMessage()}`}toStringMessage(){const t=C.#t(this.code);return this.cause?this.cause instanceof Error?`${t}, context:

${this.cause}`:`${t}, context:

${JSON.stringify(this.cause)}`:t}static#t(t){switch(t){case"remote-no-url":return"remote param should be an URL";case"remote-no-ext":return"a file-extension could not be determined";case"url-request-head":return"the request to get the file-extension failed";case"url-request-get":return"the request to download the file failed";default:return"try-reloading Obsidian"}}}function I(r,t){return!r.startsWith("*")&&t.startsWith("*")?-1:r.startsWith("*")&&!t.startsWith("*")?1:r.startsWith(t)?-1:t.startsWith(r)?1:r.localeCompare(t,"en")}function xt(r){switch(r){case"image/jpeg":return"jpg";case"image/tiff":return"tif";default:return r.split(/\/|\+/gi)[1]}}function Rt(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}var Tt=ot;function ot(r,t,e){r instanceof RegExp&&(r=Z(r,e)),t instanceof RegExp&&(t=Z(t,e));var s=ht(r,t,e);return s&&{start:s[0],end:s[1],pre:e.slice(0,s[0]),body:e.slice(s[0]+r.length,s[1]),post:e.slice(s[1]+t.length)}}function Z(r,t){var e=t.match(r);return e?e[0]:null}ot.range=ht;function ht(r,t,e){var s,n,i,a,o,h=e.indexOf(r),c=e.indexOf(t,h+1),l=h;if(h>=0&&c>0){if(r===t)return[h,c];for(s=[],i=e.length;l>=0&&!o;)l==h?(s.push(l),h=e.indexOf(r,l+1)):s.length==1?o=[s.pop(),c]:(n=s.pop(),n<i&&(i=n,a=c),c=e.indexOf(t,l+1)),l=h<c&&h>=0?h:c;s.length&&(o=[i,a])}return o}var ct=Tt,Ot=At,lt="\0SLASH"+Math.random()+"\0",ut="\0OPEN"+Math.random()+"\0",z="\0CLOSE"+Math.random()+"\0",pt="\0COMMA"+Math.random()+"\0",ft="\0PERIOD"+Math.random()+"\0";function W(r){return parseInt(r,10)==r?parseInt(r,10):r.charCodeAt(0)}function Nt(r){return r.split("\\\\").join(lt).split("\\{").join(ut).split("\\}").join(z).split("\\,").join(pt).split("\\.").join(ft)}function Dt(r){return r.split(lt).join("\\").split(ut).join("{").split(z).join("}").split(pt).join(",").split(ft).join(".")}function gt(r){if(!r)return[""];var t=[],e=ct("{","}",r);if(!e)return r.split(",");var s=e.pre,n=e.body,i=e.post,a=s.split(",");a[a.length-1]+="{"+n+"}";var o=gt(i);return i.length&&(a[a.length-1]+=o.shift(),a.push.apply(a,o)),t.push.apply(t,a),t}function At(r){return r?(r.substr(0,2)==="{}"&&(r="\\{\\}"+r.substr(2)),P(Nt(r),!0).map(Dt)):[]}function Ct(r){return"{"+r+"}"}function $t(r){return/^-?0\d/.test(r)}function Mt(r,t){return r<=t}function Pt(r,t){return r>=t}function P(r,t){var e=[],s=ct("{","}",r);if(!s)return[r];var n=s.pre,i=s.post.length?P(s.post,!1):[""];if(/\$$/.test(s.pre))for(var a=0;a<i.length;a++){var o=n+"{"+s.body+"}"+i[a];e.push(o)}else{var h=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),c=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),l=h||c,g=s.body.indexOf(",")>=0;if(!l&&!g)return s.post.match(/,.*\}/)?(r=s.pre+"{"+s.body+z+s.post,P(r)):[r];var u;if(l)u=s.body.split(/\.\./);else if(u=gt(s.body),u.length===1&&(u=P(u[0],!1).map(Ct),u.length===1))return i.map(function(vt){return s.pre+u[0]+vt});var p;if(l){var d=W(u[0]),f=W(u[1]),b=Math.max(u[0].length,u[1].length),T=u.length==3?Math.abs(W(u[2])):1,$=Mt,O=f<d;O&&(T*=-1,$=Pt);var N=u.some($t);p=[];for(var D=d;$(D,f);D+=T){var y;if(c)y=String.fromCharCode(D),y==="\\"&&(y="");else if(y=String(D),N){var V=b-y.length;if(V>0){var J=new Array(V+1).join("0");D<0?y="-"+J+y.slice(1):y=J+y}}p.push(y)}}else{p=[];for(var A=0;A<u.length;A++)p.push.apply(p,P(u[A],!1))}for(var A=0;A<p.length;A++)for(var a=0;a<i.length;a++){var o=n+p[A]+i[a];(!t||l||o)&&e.push(o)}}return e}const kt=Rt(Ot),jt=1024*64,_=r=>{if(typeof r!="string")throw new TypeError("invalid pattern");if(r.length>jt)throw new TypeError("pattern is too long")},_t={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},M=r=>r.replace(/[[\]\\-]/g,"\\$&"),Lt=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),K=r=>r.join(""),Wt=(r,t)=>{const e=t;if(r.charAt(e)!=="[")throw new Error("not in a brace expression");const s=[],n=[];let i=e+1,a=!1,o=!1,h=!1,c=!1,l=e,g="";t:for(;i<r.length;){const f=r.charAt(i);if((f==="!"||f==="^")&&i===e+1){c=!0,i++;continue}if(f==="]"&&a&&!h){l=i+1;break}if(a=!0,f==="\\"&&!h){h=!0,i++;continue}if(f==="["&&!h){for(const[b,[T,$,O]]of Object.entries(_t))if(r.startsWith(b,i)){if(g)return["$.",!1,r.length-e,!0];i+=b.length,O?n.push(T):s.push(T),o=o||$;continue t}}if(h=!1,g){f>g?s.push(M(g)+"-"+M(f)):f===g&&s.push(M(f)),g="",i++;continue}if(r.startsWith("-]",i+1)){s.push(M(f+"-")),i+=2;continue}if(r.startsWith("-",i+1)){g=f,i+=2;continue}s.push(M(f)),i++}if(l<i)return["",!1,0,!1];if(!s.length&&!n.length)return["$.",!1,r.length-e,!0];if(n.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!c){const f=s[0].length===2?s[0].slice(-1):s[0];return[Lt(f),!1,l-e,!1]}const u="["+(c?"^":"")+K(s)+"]",p="["+(c?"":"^")+K(n)+"]";return[s.length&&n.length?"("+u+"|"+p+")":s.length?u:p,o,l-e,!0]},k=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/\[([^\/\\])\]/g,"$1"):r.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1"),Bt=new Set(["!","?","+","*","@"]),Q=r=>Bt.has(r),Ft="(?!(?:^|/)\\.\\.?(?:$|/))",B="(?!\\.)",Gt=new Set(["[","."]),It=new Set(["..","."]),zt=new Set("().*{}+?[]^$\\!"),Ut=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),U="[^/]",X=U+"*?",Y=U+"+?";class v{type;#t;#e;#n=!1;#s=[];#i;#h;#r;#a=!1;#o;#c;#g=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#i=e,this.#t=this.#i?this.#i.#t:this,this.#o=this.#t===this?s:this.#t.#o,this.#r=this.#t===this?[]:this.#t.#r,t==="!"&&!this.#t.#a&&this.#r.push(this),this.#h=this.#i?this.#i.#s.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(const t of this.#s)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#c!==void 0?this.#c:this.type?this.#c=this.type+"("+this.#s.map(t=>String(t)).join("|")+")":this.#c=this.#s.map(t=>String(t)).join("")}#u(){if(this!==this.#t)throw new Error("should only call on root");if(this.#a)return this;this.toString(),this.#a=!0;let t;for(;t=this.#r.pop();){if(t.type!=="!")continue;let e=t,s=e.#i;for(;s;){for(let n=e.#h+1;!s.type&&n<s.#s.length;n++)for(const i of t.#s){if(typeof i=="string")throw new Error("string part in extglob AST??");i.copyIn(s.#s[n])}e=s,s=e.#i}}return this}push(...t){for(const e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof v&&e.#i===this))throw new Error("invalid part: "+e);this.#s.push(e)}}toJSON(){const t=this.type===null?this.#s.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#s.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#a&&this.#i?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#i?.isStart())return!1;if(this.#h===0)return!0;const t=this.#i;for(let e=0;e<this.#h;e++){const s=t.#s[e];if(!(s instanceof v&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#i?.type==="!")return!0;if(!this.#i?.isEnd())return!1;if(!this.type)return this.#i?.isEnd();const t=this.#i?this.#i.#s.length:0;return this.#h===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){const e=new v(this.type,t);for(const s of this.#s)e.copyIn(s);return e}static#l(t,e,s,n){let i=!1,a=!1,o=-1,h=!1;if(e.type===null){let p=s,d="";for(;p<t.length;){const f=t.charAt(p++);if(i||f==="\\"){i=!i,d+=f;continue}if(a){p===o+1?(f==="^"||f==="!")&&(h=!0):f==="]"&&!(p===o+2&&h)&&(a=!1),d+=f;continue}else if(f==="["){a=!0,o=p,h=!1,d+=f;continue}if(!n.noext&&Q(f)&&t.charAt(p)==="("){e.push(d),d="";const b=new v(f,e);p=v.#l(t,b,p,n),e.push(b);continue}d+=f}return e.push(d),p}let c=s+1,l=new v(null,e);const g=[];let u="";for(;c<t.length;){const p=t.charAt(c++);if(i||p==="\\"){i=!i,u+=p;continue}if(a){c===o+1?(p==="^"||p==="!")&&(h=!0):p==="]"&&!(c===o+2&&h)&&(a=!1),u+=p;continue}else if(p==="["){a=!0,o=c,h=!1,u+=p;continue}if(Q(p)&&t.charAt(c)==="("){l.push(u),u="";const d=new v(p,l);l.push(d),c=v.#l(t,d,c,n);continue}if(p==="|"){l.push(u),u="",g.push(l),l=new v(null,e);continue}if(p===")")return u===""&&e.#s.length===0&&(e.#g=!0),l.push(u),u="",e.push(...g,l),c;u+=p}return e.type=null,e.#e=void 0,e.#s=[t.substring(s-1)],c}static fromGlob(t,e={}){const s=new v(null,void 0,e);return v.#l(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();const t=this.toString(),[e,s,n,i]=this.toRegExpSource();if(!(n||this.#e||this.#o.nocase&&!this.#o.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;const o=(this.#o.nocase?"i":"")+(i?"u":"");return Object.assign(new RegExp(`^${e}$`,o),{_src:e,_glob:t})}get options(){return this.#o}toRegExpSource(t){const e=t??!!this.#o.dot;if(this.#t===this&&this.#u(),!this.type){const h=this.isStart()&&this.isEnd(),c=this.#s.map(p=>{const[d,f,b,T]=typeof p=="string"?v.#d(p,this.#e,h):p.toRegExpSource(t);return this.#e=this.#e||b,this.#n=this.#n||T,d}).join("");let l="";if(this.isStart()&&typeof this.#s[0]=="string"&&!(this.#s.length===1&&It.has(this.#s[0]))){const d=Gt,f=e&&d.has(c.charAt(0))||c.startsWith("\\.")&&d.has(c.charAt(2))||c.startsWith("\\.\\.")&&d.has(c.charAt(4)),b=!e&&!t&&d.has(c.charAt(0));l=f?Ft:b?B:""}let g="";return this.isEnd()&&this.#t.#a&&this.#i?.type==="!"&&(g="(?:$|\\/)"),[l+c+g,k(c),this.#e=!!this.#e,this.#n]}const s=this.type==="*"||this.type==="+",n=this.type==="!"?"(?:(?!(?:":"(?:";let i=this.#p(e);if(this.isStart()&&this.isEnd()&&!i&&this.type!=="!"){const h=this.toString();return this.#s=[h],this.type=null,this.#e=void 0,[h,k(this.toString()),!1,!1]}let a=!s||t||e?"":this.#p(!0);a===i&&(a=""),a&&(i=`(?:${i})(?:${a})*?`);let o="";if(this.type==="!"&&this.#g)o=(this.isStart()&&!e?B:"")+Y;else{const h=this.type==="!"?"))"+(this.isStart()&&!e&&!t?B:"")+X+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&a?")":this.type==="*"&&a?")?":`)${this.type}`;o=n+i+h}return[o,k(i),this.#e=!!this.#e,this.#n]}#p(t){return this.#s.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");const[s,n,i,a]=e.toRegExpSource(t);return this.#n=this.#n||a,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#d(t,e,s=!1){let n=!1,i="",a=!1;for(let o=0;o<t.length;o++){const h=t.charAt(o);if(n){n=!1,i+=(zt.has(h)?"\\":"")+h;continue}if(h==="\\"){o===t.length-1?i+="\\\\":n=!0;continue}if(h==="["){const[c,l,g,u]=Wt(t,o);if(g){i+=c,a=a||l,o+=g-1,e=e||u;continue}}if(h==="*"){s&&t==="*"?i+=Y:i+=X,e=!0;continue}if(h==="?"){i+=U,e=!0;continue}i+=Ut(h)}return[i,k(t),!!e,a]}}const qt=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/[?*()[\]]/g,"[$&]"):r.replace(/[?*()[\]\\]/g,"\\$&"),E=(r,t,e={})=>(_(t),!e.nocomment&&t.charAt(0)==="#"?!1:new L(t,e).match(r)),Ht=/^\*+([^+@!?\*\[\(]*)$/,Vt=r=>t=>!t.startsWith(".")&&t.endsWith(r),Jt=r=>t=>t.endsWith(r),Zt=r=>(r=r.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(r)),Kt=r=>(r=r.toLowerCase(),t=>t.toLowerCase().endsWith(r)),Qt=/^\*+\.\*+$/,Xt=r=>!r.startsWith(".")&&r.includes("."),Yt=r=>r!=="."&&r!==".."&&r.includes("."),te=/^\.\*+$/,ee=r=>r!=="."&&r!==".."&&r.startsWith("."),se=/^\*+$/,ie=r=>r.length!==0&&!r.startsWith("."),ne=r=>r.length!==0&&r!=="."&&r!=="..",re=/^\?+([^+@!?\*\[\(]*)?$/,ae=([r,t=""])=>{const e=dt([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},oe=([r,t=""])=>{const e=mt([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},he=([r,t=""])=>{const e=mt([r]);return t?s=>e(s)&&s.endsWith(t):e},ce=([r,t=""])=>{const e=dt([r]);return t?s=>e(s)&&s.endsWith(t):e},dt=([r])=>{const t=r.length;return e=>e.length===t&&!e.startsWith(".")},mt=([r])=>{const t=r.length;return e=>e.length===t&&e!=="."&&e!==".."},wt=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",tt={win32:{sep:"\\"},posix:{sep:"/"}},le=wt==="win32"?tt.win32.sep:tt.posix.sep;E.sep=le;const x=Symbol("globstar **");E.GLOBSTAR=x;const ue="[^/]",pe=ue+"*?",fe="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",ge="(?:(?!(?:\\/|^)\\.).)*?",de=(r,t={})=>e=>E(e,r,t);E.filter=de;const S=(r,t={})=>Object.assign({},r,t),me=r=>{if(!r||typeof r!="object"||!Object.keys(r).length)return E;const t=E;return Object.assign((s,n,i={})=>t(s,n,S(r,i)),{Minimatch:class extends t.Minimatch{constructor(n,i={}){super(n,S(r,i))}static defaults(n){return t.defaults(S(r,n)).Minimatch}},AST:class extends t.AST{constructor(n,i,a={}){super(n,i,S(r,a))}static fromGlob(n,i={}){return t.AST.fromGlob(n,S(r,i))}},unescape:(s,n={})=>t.unescape(s,S(r,n)),escape:(s,n={})=>t.escape(s,S(r,n)),filter:(s,n={})=>t.filter(s,S(r,n)),defaults:s=>t.defaults(S(r,s)),makeRe:(s,n={})=>t.makeRe(s,S(r,n)),braceExpand:(s,n={})=>t.braceExpand(s,S(r,n)),match:(s,n,i={})=>t.match(s,n,S(r,i)),sep:t.sep,GLOBSTAR:x})};E.defaults=me;const Et=(r,t={})=>(_(r),t.nobrace||!/\{(?:(?!\{).)*\}/.test(r)?[r]:kt(r));E.braceExpand=Et;const we=(r,t={})=>new L(r,t).makeRe();E.makeRe=we;const Ee=(r,t,e={})=>{const s=new L(t,e);return r=r.filter(n=>s.match(n)),s.options.nonull&&!r.length&&r.push(t),r};E.match=Ee;const et=/[?*]|[+@!]\(.*?\)|\[|\]/,ve=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&");class L{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){_(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||wt,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const t of this.set)for(const e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){const t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...i)=>console.error(...i)),this.debug(this.pattern,this.globSet);const s=this.globSet.map(i=>this.slashSplit(i));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let n=this.globParts.map((i,a,o)=>{if(this.isWindows&&this.windowsNoMagicRoot){const h=i[0]===""&&i[1]===""&&(i[2]==="?"||!et.test(i[2]))&&!et.test(i[3]),c=/^[a-z]:/i.test(i[0]);if(h)return[...i.slice(0,4),...i.slice(4).map(l=>this.parse(l))];if(c)return[i[0],...i.slice(1).map(l=>this.parse(l))]}return i.map(h=>this.parse(h))});if(this.debug(this.pattern,n),this.set=n.filter(i=>i.indexOf(!1)===-1),this.isWindows)for(let i=0;i<this.set.length;i++){const a=this.set[i];a[0]===""&&a[1]===""&&this.globParts[i][2]==="?"&&typeof a[3]=="string"&&/^[a-z]:$/i.test(a[3])&&(a[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let n=0;n<t[s].length;n++)t[s][n]==="**"&&(t[s][n]="*");const{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let n=s;for(;e[n+1]==="**";)n++;n!==s&&e.splice(s,n-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,n)=>{const i=s[s.length-1];return n==="**"&&i==="**"?s:n===".."&&i&&i!==".."&&i!=="."&&i!=="**"?(s.pop(),s):(s.push(n),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let n=1;n<t.length-1;n++){const i=t[n];n===1&&i===""&&t[0]===""||(i==="."||i==="")&&(e=!0,t.splice(n,1),n--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){const n=t[s-1];n&&n!=="."&&n!==".."&&n!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let n=-1;for(;(n=s.indexOf("**",n+1))!==-1;){let a=n;for(;s[a+1]==="**";)a++;a>n&&s.splice(n+1,a-n);let o=s[n+1];const h=s[n+2],c=s[n+3];if(o!==".."||!h||h==="."||h===".."||!c||c==="."||c==="..")continue;e=!0,s.splice(n,1);const l=s.slice(0);l[n]="**",t.push(l),n--}if(!this.preserveMultipleSlashes){for(let a=1;a<s.length-1;a++){const o=s[a];a===1&&o===""&&s[0]===""||(o==="."||o==="")&&(e=!0,s.splice(a,1),a--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let i=0;for(;(i=s.indexOf("..",i+1))!==-1;){const a=s[i-1];if(a&&a!=="."&&a!==".."&&a!=="**"){e=!0;const h=i===1&&s[i+1]==="**"?["."]:[];s.splice(i-1,2,...h),s.length===0&&s.push(""),i-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){const n=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(n){t[e]=[],t[s]=n;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let n=0,i=0,a=[],o="";for(;n<t.length&&i<e.length;)if(t[n]===e[i])a.push(o==="b"?e[i]:t[n]),n++,i++;else if(s&&t[n]==="**"&&e[i]===t[n+1])a.push(t[n]),n++;else if(s&&e[i]==="**"&&t[n]===e[i+1])a.push(e[i]),i++;else if(t[n]==="*"&&e[i]&&(this.options.dot||!e[i].startsWith("."))&&e[i]!=="**"){if(o==="b")return!1;o="a",a.push(t[n]),n++,i++}else if(e[i]==="*"&&t[n]&&(this.options.dot||!t[n].startsWith("."))&&t[n]!=="**"){if(o==="a")return!1;o="b",a.push(e[i]),n++,i++}else return!1;return t.length===e.length&&a}parseNegate(){if(this.nonegate)return;const t=this.pattern;let e=!1,s=0;for(let n=0;n<t.length&&t.charAt(n)==="!";n++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){const n=this.options;if(this.isWindows){const f=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),b=!f&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),T=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),$=!T&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),O=b?3:f?0:void 0,N=$?3:T?0:void 0;if(typeof O=="number"&&typeof N=="number"){const[D,y]=[t[O],e[N]];D.toLowerCase()===y.toLowerCase()&&(e[N]=D,N>O?e=e.slice(N):O>N&&(t=t.slice(O)))}}const{optimizationLevel:i=1}=this.options;i>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var a=0,o=0,h=t.length,c=e.length;a<h&&o<c;a++,o++){this.debug("matchOne loop");var l=e[o],g=t[a];if(this.debug(e,l,g),l===!1)return!1;if(l===x){this.debug("GLOBSTAR",[e,l,g]);var u=a,p=o+1;if(p===c){for(this.debug("** at the end");a<h;a++)if(t[a]==="."||t[a]===".."||!n.dot&&t[a].charAt(0)===".")return!1;return!0}for(;u<h;){var d=t[u];if(this.debug(`
globstar while`,t,u,e,p,d),this.matchOne(t.slice(u),e.slice(p),s))return this.debug("globstar found match!",u,h,d),!0;if(d==="."||d===".."||!n.dot&&d.charAt(0)==="."){this.debug("dot detected!",t,u,e,p);break}this.debug("globstar swallow a segment, and continue"),u++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,u,e,p),u===h))}let f;if(typeof l=="string"?(f=g===l,this.debug("string match",l,g,f)):(f=l.test(g),this.debug("pattern match",l,g,f)),!f)return!1}if(a===h&&o===c)return!0;if(a===h)return s;if(o===c)return a===h-1&&t[a]==="";throw new Error("wtf?")}braceExpand(){return Et(this.pattern,this.options)}parse(t){_(t);const e=this.options;if(t==="**")return x;if(t==="")return"";let s,n=null;(s=t.match(se))?n=e.dot?ne:ie:(s=t.match(Ht))?n=(e.nocase?e.dot?Kt:Zt:e.dot?Jt:Vt)(s[1]):(s=t.match(re))?n=(e.nocase?e.dot?oe:ae:e.dot?he:ce)(s):(s=t.match(Qt))?n=e.dot?Yt:Xt:(s=t.match(te))&&(n=ee);const i=v.fromGlob(t,this.options).toMMPattern();return n&&typeof i=="object"&&Reflect.defineProperty(i,"test",{value:n}),i}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;const t=this.set;if(!t.length)return this.regexp=!1,this.regexp;const e=this.options,s=e.noglobstar?pe:e.dot?fe:ge,n=new Set(e.nocase?["i"]:[]);let i=t.map(h=>{const c=h.map(l=>{if(l instanceof RegExp)for(const g of l.flags.split(""))n.add(g);return typeof l=="string"?ve(l):l===x?x:l._src});return c.forEach((l,g)=>{const u=c[g+1],p=c[g-1];l!==x||p===x||(p===void 0?u!==void 0&&u!==x?c[g+1]="(?:\\/|"+s+"\\/)?"+u:c[g]=s:u===void 0?c[g-1]=p+"(?:\\/|"+s+")?":u!==x&&(c[g-1]=p+"(?:\\/|\\/"+s+"\\/)"+u,c[g+1]=x))}),c.filter(l=>l!==x).join("/")}).join("|");const[a,o]=t.length>1?["(?:",")"]:["",""];i="^"+a+i+o+"$",this.negate&&(i="^(?!"+i+").+$");try{this.regexp=new RegExp(i,[...n].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;const s=this.options;this.isWindows&&(t=t.split("\\").join("/"));const n=this.slashSplit(t);this.debug(this.pattern,"split",n);const i=this.set;this.debug(this.pattern,"set",i);let a=n[n.length-1];if(!a)for(let o=n.length-2;!a&&o>=0;o--)a=n[o];for(let o=0;o<i.length;o++){const h=i[o];let c=n;if(s.matchBase&&h.length===1&&(c=[a]),this.matchOne(c,h,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return E.defaults(t).Minimatch}}E.AST=v;E.Minimatch=L;E.escape=qt;E.unescape=k;function st(r){const t=[];let e=!1;for(const s of r)t.every(n=>n.pattern!==s.pattern)&&(s.pattern==="*"&&(e=!0),t.push(s));return e||t.push({pattern:"*",whitelisted:!1}),t.sort((s,n)=>I(s.pattern,n.pattern))}function it(r){return r.map(({whitelisted:t,pattern:e})=>`${t?"w":"b"} ${e}`).join(`
`)}function be(r){if(!/\s+/.test(r))return[r,void 0];const t=r.split(/\s+/g);return t[0].startsWith("w")?[t[1],!0]:t[0].startsWith("b")?[t[1],!1]:[t[1],void 0]}function ye(r,t){const e=[];let s=!1;for(const n of t.split(/\n+/g)){const[i,a]=be(n);if(i==="*"&&(s=!0),!e.some(o=>o.pattern===i)){if(a!==void 0){e.push({pattern:i,whitelisted:a});continue}for(const o of r){if(i===o.pattern){e.push({pattern:i,whitelisted:o.whitelisted});break}if(Math.abs(i.length-o.pattern.length)===1){if(o.pattern.startsWith(i)){e.push({pattern:i,whitelisted:o.whitelisted});break}else if(i.startsWith(o.pattern)){e.push({pattern:i,whitelisted:o.whitelisted});break}}}e.some(o=>o.pattern===i)||e.push({pattern:i,whitelisted:!1})}}return s||e.push({pattern:"*",whitelisted:!1}),e.sort((n,i)=>I(n.pattern,i.pattern))}function Se(r){const t=[];let e=!1;for(const s of r.split(/\n+/g)){const n=s.trim().replace(/^[wb]\s+/,"");if(n==="*"){e=!0;continue}/^\w+:/gi.test(n)&&t.push("remove protocols, ex: 'http://'"),/^(\w+\.)+\w+/.test(n)||t.push("should include domain, ex: 'example.org/path'")}return e||t.unshift("should include a fallback '*'"),t}function nt(r="fallback_param"){const t=new RegExp("[?&]"+r+"([&=\\s]|$)","i");return e=>t.test(e)}async function xe(r,t){t.debug(`Resolving extension for ${r}`);const e=G.getOrigin(r),s=await w.requestUrl({url:r,throw:!1,method:"HEAD",headers:{Referer:e?e+"/":""}});return C.assertResponse(r,s,"url-request-head"),xt(s.headers["content-type"])}async function Re(r,t){t.debug(`Downloading ${r}`);const e=G.getOrigin(r),s=await w.requestUrl({url:r,throw:!1,method:"GET",headers:{Referer:e?e+"/":""}});return C.assertResponse(r,s,"url-request-get"),s.arrayBuffer}function Te(r){return r.map(t=>{let e=i=>R.getParent(i);switch(t.mode){case"NOTE-FOLDER":e=i=>R.join(R.getParent(i),t.target);break;case"TARGET-PATH":e=i=>R.join(t.target,R.removeExt(i));break;case"TARGET-NOTE":e=i=>R.join(t.target,R.getBasename(i));break;case"TARGET":e=()=>t.target;break}const s=t.pattern!=="*"?i=>E(i,t.pattern):()=>!0,n=i=>{for(const{pattern:a,whitelisted:o}of t.remotes)if(a==="*"||new RegExp("^https?://(\\w+\\.)*"+a,"g").test(i))return o;return!1};return{source:Object.freeze(t),isEnabled:()=>t.enabled,testRemote:n,testPath:s,resolve:e}})}function F(r){const t=[];for(const e of r){const s=t.findIndex(n=>n.pattern===e.pattern);if(s===-1){t.push({...e,remotes:st(e.remotes)});continue}e.remotes.length>t[s].remotes.length&&(t[s]={...e,remotes:st(e.remotes)})}return t.sort((e,s)=>I(e.pattern,s.pattern))}function Oe(r,t){if(!t)return["invalid pattern"];for(const e of r)if(e.pattern===t)return[`duplicated pattern '${t}'`];return[]}const Ne={NOTE:"Attachments next to the Note","NOTE-FOLDER":"Attachments on Subfolder",TARGET:"Attachments on Cache Folder","TARGET-NOTE":"Attachments on Cache Note Folder","TARGET-PATH":"Attachments on Cache Note Path"},rt={NOTE:"Store in the same folder as the note","NOTE-FOLDER":"Store next to the note in subfolder ",TARGET:"Store in folder ","TARGET-NOTE":"Store in subfolder with the note-name under ","TARGET-PATH":"Store in a replated note-path under "},De=({mode:r,target:t})=>{switch(r){case"NOTE":return"folder/img1.jpg";case"NOTE-FOLDER":return`folder/${t}/img1.jpg`;case"TARGET":return`${t}/img1.jpg`;case"TARGET-NOTE":return`${t}/note1/img1.jpg`;case"TARGET-PATH":return`${t}/folder/note1/img1.jpg`}};class Ae{#t;#e;#n;#s;#i;constructor(t,e){this.#t={...e,remotes:[...e.remotes]},this.#e=new w.Setting(t),this.#n=this.#e.settingEl.createDiv("cache-details"),this.#s=this.#e.settingEl.createDiv("cache-remotes"),this.#a(),this.#c(),this.#u()}#h(){return createFragment(t=>{t.append(`${this.#t.enabled?"Enabled":"Disabled"} path: `),t.createEl("code").appendText(this.#t.pattern)})}#r(){return this.#t.mode==="NOTE"?rt.NOTE:createFragment(t=>{t.append(rt[this.#t.mode]),t.createEl("code").appendText(this.#t.target)})}#a(){this.#e.setName(this.#h()),this.#e.setDesc(this.#r()),this.#t.pattern!=="*"&&this.#e.addExtraButton(t=>{t.setIcon("trash-2").setTooltip("Remove"),t.onClick(()=>{if(this.#t.pattern==="*"){console.warn("fallback config('*') can't be removed");return}this.#e.clear(),this.#e.settingEl.remove(),this.#m()})}),this.#e.addToggle(t=>{t.setValue(this.#t.enabled),t.onChange(e=>{this.#t.enabled=e,this.#f(),this.#e.setName(this.#h())})}),this.#e.addExtraButton(t=>{let e=!1;t.setIcon("chevron-down").setTooltip("Details"),t.onClick(()=>{e=!e,e?(t.setIcon("chevron-up"),this.#e.settingEl.addClass("show-details")):(t.setIcon("chevron-down"),this.#e.settingEl.removeClass("show-details"))})})}#o(){return createFragment(t=>{t.append("Attachments storage path, ex:");const e=t.createEl("ul"),s=e.createEl("li");s.append("Note: '"),s.createEl("b").appendText("folder/note1.md"),s.append("'");const n=e.createEl("li");n.append("Attachment: '"),n.createEl("b").appendText(De(this.#t)),n.append("'")})}#c(){let t;const e=new w.Setting(this.#n);e.setName("Attachments Storage"),e.setDesc(this.#o()),e.addDropdown(a=>{a.addOptions(Ne),a.setValue(this.#t.mode),a.onChange(o=>{this.#t.mode=o,this.#f(),e.setDesc(this.#o()),this.#t.mode==="NOTE"?(t?.setDisabled(!0),t?.setValue("")):(t?.setDisabled(!1),t?.setValue(this.#t.target))})}),e.addText(a=>{t=a,this.#t.mode==="NOTE"?a.setDisabled(!0):a.setValue(this.#t.target),a.onChange(o=>{this.#t.target=o,this.#f(),e.setDesc(this.#o())})});const s=createFragment(),n=s.createEl("ul"),i=new w.Setting(this.#n);i.setClass("remotes-input"),i.setName("Remotes List"),i.setDesc(s),i.addTextArea(a=>{this.#i=a,a.setValue(it(this.#t.remotes)),a.onChange(o=>{n.empty();const h=Se(o);if(h.length>0){h.forEach(c=>n.createEl("li").appendText(c));return}this.#t.remotes=ye(this.#t.remotes,o),this.#f(),this.#u()})})}#g(t){return createFragment(e=>{e.append(`${t.whitelisted?"Whitelisted":"Blacklisted"} remote: `),e.createEl("code").appendText(t.pattern)})}#u(){this.#s.empty();for(const t of this.#t.remotes){const e=new w.Setting(this.#s);e.setName(this.#g(t)),t.pattern!=="*"&&e.addExtraButton(s=>{s.setIcon("trash-2").setTooltip("Remove"),s.onClick(()=>{const n=this.#t.remotes.filter(i=>i.pattern!==t.pattern);this.#l(n)})}),e.addButton(s=>{s.setButtonText(t.whitelisted?"Blacklist":"Whitelist"),s.onClick(()=>{const n=this.#t.remotes.map(i=>i.pattern!==t.pattern?i:{...i,whitelisted:!i.whitelisted});this.#l(n)})})}}#l(t){this.#t.remotes=t,this.#f(),this.#i?.setValue(it(t)),this.#u()}#p=[];#d=[];#f(){for(const t of this.#p)t(this.#t)}#m(){for(const t of this.#d)t(this.#t)}onChange(t){return this.#p.push(t),this}onRemove(t){return this.#d.push(t),this}}class Ce extends w.PluginSettingTab{#t;#e;#n;constructor(t){super(t.app,t),this.#t=t,this.#e=t.settings}hide(){}display(){this.containerEl.empty(),this.containerEl.addClass("attachments-cache-settings"),this.#s(),new w.Setting(this.containerEl).setName("Paths Settings").setHeading(),this.#i(),this.#n=this.containerEl.createDiv("configs-list"),this.#h()}#s(){const t=new w.Setting(this.containerEl);t.setName("Plugging Log Level"),t.addDropdown(i=>{i.addOption("ERROR","ERROR"),i.addOption("WARN"," WARN"),i.addOption("INFO"," INFO"),i.addOption("DEBUG","DEBUG"),i.addOption("TRACE","TRACE"),i.setValue(this.#e.log_level),i.onChange(this.#r.bind(this,"log_level"))});const e=new w.Setting(this.containerEl);e.setName("Keep Special Characters"),e.setDesc("If you are having problems with special characters on paths, disable this setting."),e.addToggle(i=>{i.setValue(this.#e.allow_characters),i.onChange(this.#r.bind(this,"allow_characters"))});const s=new w.Setting(this.containerEl);s.setName("URL Param Cache"),s.setDesc("Overrides standard rules and stores the file."),s.addText(i=>{i.setValue(this.#e.url_param_cache),i.onChange(this.#r.bind(this,"url_param_cache"))});const n=new w.Setting(this.containerEl);n.setName("URL Param Ignore"),n.setDesc("Overrides standard rules and ignores the file."),n.addText(i=>{i.setValue(this.#e.url_param_ignore),i.onChange(this.#r.bind(this,"url_param_ignore"))})}#i(){let t=null,e=null,s=null;const n=createFragment(),i=n.createEl("ul"),a=new w.Setting(this.containerEl);a.setClass("configs-header"),a.setName("Duplicate Vault Path"),a.setDesc(n),a.addText(o=>{t=o,o.setPlaceholder("glob: **/*.md"),o.onChange(h=>{if(i.empty(),!h){s?.setDisabled(!0);return}const c=Oe(this.#e.cache_configs,h);if(c.length>0){c.forEach(l=>i.createEl("li").appendText(l));return}s?.setDisabled(c.length>0)})}),a.addDropdown(o=>{e=o,o.setValue("*");for(const h of this.#e.cache_configs)o.addOption(h.pattern,h.pattern)}),a.addButton(o=>{s=o,o.setButtonText("Duplicate"),o.setDisabled(!0),o.onClick(()=>{const h=t?.getValue(),c=e?.getValue()??"*",l=this.#e.cache_configs.find(u=>u.pattern===c);if(!h||!l){console.warn("unexpected state");return}const g=this.#e.cache_configs;g.push({pattern:h,remotes:l.remotes,enabled:l.enabled,target:l.target,mode:l.mode}),this.#a(g)})})}#h(){if(this.#n){this.#n.empty();for(const t of this.#e.cache_configs){const e=new Ae(this.#n,t);e.onChange(s=>{const n=this.#e.cache_configs.map(i=>i.pattern===s.pattern?s:i);this.#a(n)}),e.onRemove(s=>{const n=this.#e.cache_configs.filter(i=>i.pattern!==s.pattern);this.#a(n)})}}}#r(t,e){this.#e[t]=e,this.#t.saveSettings()}#a(t){this.#e.cache_configs=F(t),this.#t.saveSettings()}}class $e{constructor(t){this.plugin=t}registerMarkdownProcessor(){this.plugin.registerMarkdownPostProcessor((t,e)=>{t.querySelectorAll("img").forEach(s=>void this.#t(s,e.sourcePath))})}async#t(t,e){const s=await this.plugin.api.cache(e,t.src);s&&(t.src=s)}}class q{log;#t;#e;#n=new Map;constructor(t){this.log=t.log.make(q.name),this.#t=t.app.vault,this.#e=t}mayCache(t,e){return!!this.#s({notepath:t,remote:e},this.log)}async isCached(t,e){const s=await this.resolve(t,e);return s?await this.#t.adapter.exists(s):!1}async resource(t,e){const s=await this.resolve(t,e);if(!s)return;const n=this.#t.getFileByPath(s);return n?this.#t.getResourcePath(n):void 0}async resolve(t,e){const s=this.log.group();try{s.debug("Resolving",{notepath:t,remote:e});const n=await this.#i({notepath:t,remote:e},s);if(n)return s.flush("remote resolved",e),n}catch(n){s.error(n)}s.flush("remote could not be resolved",e)}async cache(t,e){const s=this.log.group();try{s.debug("Caching",{notepath:t,remote:e});const n=await this.#i({notepath:t,remote:e},s);if(!n){s.debug("remote could not be resolved"),s.flush("remote was not cached",e);return}const i=this.#t.getFileByPath(n);if(i)return s.flush("remote is already in cache",e),this.#t.getResourcePath(i);const a=await Re(e,s);await this.#t.adapter.mkdir(R.getParent(n)),await this.#t.adapter.writeBinary(n,a);const o=this.#t.getFileByPath(n);if(o)return s.flush("remote was cached",e),this.#t.getResourcePath(o)}catch(n){s.error(n)}s.flush("remote could not be cached",e)}#s(t,e){e?.debug("searching an active cache rule");const s=this.#e.state.cache_matchers.find(n=>n.testPath(t.notepath));if(!s?.isEnabled()){e?.debug("notepath does not match and active rule");return}if(this.#e.state.url_ignore_matcher(t.remote)){e?.debug("remote is marked to be ignored");return}if(this.#e.state.url_cache_matcher(t.remote))return e?.debug("remote is marked to be cached"),s;if(s.testRemote(t.remote))return e?.debug("remote matches an active rule"),s;e?.debug("remote does not match and active rule")}async#i(t,e){const s=G.getBaseurl(t.remote);if(!s)throw e.debug("remote is not a valid URL"),new C("remote-no-url",`remote(${t.remote})`);const n=this.#n.get(s);if(n)return e.debug("remote resolved from cache",n),n;const i=this.#s(t,e);if(!i){e.debug("a cache rule could not be matched");return}const a=R.getBasename(s),o=R.getExt(s)??await xe(t.remote,e);if(!a||!o)throw e.debug(`name(${a}) or ext(${o}) could not be resolved`),new C("remote-no-ext");const h=R.join(i.resolve(t.notepath),a+"."+o),c=this.#e.settings.allow_characters?w.normalizePath(h):w.normalizePath(R.normalize(h));return this.#n.set(s,c),e.debug("remote resolved",c),c}}const at={log_level:"WARN",allow_characters:!1,url_param_cache:"cache_file",url_param_ignore:"ignore_file",cache_configs:[{pattern:"*",remotes:[{whitelisted:!1,pattern:"*"}],enabled:!1,target:"",mode:"NOTE"}]};class H extends w.Plugin{log=j.consoleLogger(H.name);settings={};state={};api;markdown;constructor(t,e){super(t,e),this.log.setLevel(m.DEBUG),this.log.setFormat("[hh:mm:ss.ms] level:"),this.api=new q(this),this.markdown=new $e(this),window.AttachmentsCache=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new Ce(this)),this.markdown.registerMarkdownProcessor()}async loadSettings(){const t=this.log.group("Loading Settings"),{cache_configs:e,...s}=await this.loadData()||{};this.settings=Object.assign({},at,s),this.settings.cache_configs=F([...e??[],...at.cache_configs]),t.debug("Loaded: ",this.settings),this.#t(t),t.flush("Loaded Settings")}async saveSettings(){const t=this.log.group("Saving Settings"),e=Object.assign({},this.settings);e.cache_configs=F(e.cache_configs),await this.saveData(e),t.debug("Saved: ",e),this.#t(t),t.flush("Saved Settings")}#t(t){t.info("Preparing state"),this.log.setLevel(m[this.settings.log_level]),this.state={cache_matchers:Te(this.settings.cache_configs),url_cache_matcher:nt(this.settings.url_param_cache),url_ignore_matcher:nt(this.settings.url_param_ignore)}}}module.exports=H;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
