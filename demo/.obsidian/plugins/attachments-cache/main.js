/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var __defProp=Object.defineProperty;var __typeError=msg=>{throw TypeError(msg)};var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});var __publicField=(obj,key,value)=>__defNormalProp(obj,typeof key!="symbol"?key+"":key,value),__accessCheck=(obj,member,msg)=>member.has(obj)||__typeError("Cannot "+msg);var __privateGet=(obj,member,getter)=>(__accessCheck(obj,member,"read from private field"),getter?getter.call(obj):member.get(obj)),__privateAdd=(obj,member,value)=>member.has(obj)?__typeError("Cannot add the same private member more than once"):member instanceof WeakSet?member.add(obj):member.set(obj,value),__privateSet=(obj,member,value,setter)=>(__accessCheck(obj,member,"write to private field"),setter?setter.call(obj,value):member.set(obj,value),value),__privateMethod=(obj,member,method)=>(__accessCheck(obj,member,"access private method"),method);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const obsidian=require("obsidian"),_URI=class _URI{static join(...paths){return paths.reduce((path2,value)=>value?path2?path2.replace(/[\\/]+$/gi,"")+"/"+value.replace(/^[\\/]+/gi,""):value:path2,"")}static normalize(uri){return uri.replaceAll(/[^\w-\\/#?&=':,. ]+/gi,"_")}static hasExt(uri){return/\.[^\\/]*$/gi.test(uri)}static getExt(uri){return/(?<=\.)([^\\/#?]*)([#?].*)?$/gi.exec(uri)?.at(1)}static removeExt(uri){return uri.replace(/(\.[^\\/]*)?([#?].*)?$/gi,"")}static getBasename(uri){const name=_URI.getName(uri);return name?_URI.removeExt(name):void 0}static getName(uri){return uri.match(/[^\\/]+$/gi)?.at(0)}static getParent(uri){return uri.replace(/[\\/][^\\/]*$/gi,"")}};__name(_URI,"URI");let URI=_URI;const _URL=class _URL{static isUrl(uri){return/^https?:\/\//gi.test(uri)}static getOrigin(url){return/^https?:\/\/[^\\/]+/gi.exec(url)?.at(0)}static getBaseurl(url){return/^https?:\/\/[^#?]*/gi.exec(url)?.at(0)}static getHash(url){return/(?<=#)[^?]*/gi.exec(url)?.at(0)}static getparams(url){return/(?<=\?).*/gi.exec(url)?.at(0)}};__name(_URL,"URL");let URL=_URL;const LogLevel={ERROR:0,WARN:1,INFO:2,DEBUG:3,TRACE:4},LogLevelReverse={0:"ERROR",1:"WARN ",2:"INFO ",3:"DEBUG",4:"TRACE"},_ConsoleLoggerDriver=class _ConsoleLoggerDriver{error(prefix,data){console.error(prefix,...data)}warn(prefix,data){console.warn(prefix,...data)}info(prefix,data){console.info(prefix,...data)}debug(prefix,data){console.debug(prefix,...data)}trace(prefix,data){console.trace(prefix,...data)}group(prefix,data){return console.groupCollapsed(...data),console.groupEnd}};__name(_ConsoleLoggerDriver,"ConsoleLoggerDriver");let ConsoleLoggerDriver=_ConsoleLoggerDriver;const _Logger=class _Logger{constructor(namespace){this.namespace=namespace}static prefix(timestamp,namespace,level){return"["+String(timestamp.getHours()).padStart(2,"0")+":"+String(timestamp.getMinutes()).padStart(2,"0")+":"+String(timestamp.getSeconds()).padStart(2,"0")+"."+String(timestamp.getMilliseconds()).padStart(3,"0")+"] "+LogLevelReverse[level]+" ("+namespace+"):"}log(timestamp,namespace,level,data){const prefix=_Logger.prefix(timestamp,namespace,level);switch(level){case LogLevel.ERROR:return _Logger.drivers.forEach(driver=>driver.error(prefix,data));case LogLevel.WARN:return _Logger.drivers.forEach(driver=>driver.warn(prefix,data));case LogLevel.INFO:return _Logger.drivers.forEach(driver=>driver.info(prefix,data));case LogLevel.DEBUG:return _Logger.drivers.forEach(driver=>driver.debug(prefix,data));default:return _Logger.drivers.forEach(driver=>driver.trace(prefix,data))}}error(...data){this.log(new Date,this.namespace,LogLevel.ERROR,data)}warn(...data){this.log(new Date,this.namespace,LogLevel.WARN,data)}info(...data){this.log(new Date,this.namespace,LogLevel.INFO,data)}debug(...data){this.log(new Date,this.namespace,LogLevel.DEBUG,data)}trace(...data){this.log(new Date,this.namespace,LogLevel.TRACE,data)}on(logger){return logger&&logger instanceof _Logger?new LoggerWrapper(this.namespace,logger):this}group(...data){return new LoggingGroup(this.namespace,...data)}};__name(_Logger,"Logger"),_Logger.drivers=[new ConsoleLoggerDriver];let Logger=_Logger;const _LoggerWrapper=class _LoggerWrapper extends Logger{constructor(namespace,logger){super(namespace),this.logger=logger}error(...data){this.logger.log(new Date,this.namespace,LogLevel.ERROR,data)}warn(...data){this.logger.log(new Date,this.namespace,LogLevel.WARN,data)}info(...data){this.logger.log(new Date,this.namespace,LogLevel.INFO,data)}debug(...data){this.logger.log(new Date,this.namespace,LogLevel.DEBUG,data)}trace(...data){this.logger.log(new Date,this.namespace,LogLevel.TRACE,data)}flush(...data){this.logger instanceof LoggingGroup?this.logger.flush(...data):this.logger.log(new Date,this.namespace,LogLevel.INFO,data)}};__name(_LoggerWrapper,"LoggerWrapper");let LoggerWrapper=_LoggerWrapper;var _logs;const _LoggingGroup=class _LoggingGroup extends Logger{constructor(namespace,...data){super(namespace);__privateAdd(this,_logs,[]);data.length>0&&this.info(...data)}log(timestamp,namespace,level,data){__privateGet(this,_logs).push({timestamp,namespace,level,data})}flush(...data){const prefix=Logger.prefix(new Date,this.namespace,LogLevel.INFO),closers=Logger.drivers.map(driver=>driver.group(prefix,data));for(const{timestamp,namespace,level,data:data2}of __privateGet(this,_logs))super.log(timestamp,namespace,level,data2);for(const closer of closers)closer();__privateSet(this,_logs,[])}};_logs=new WeakMap,__name(_LoggingGroup,"LoggingGroup");let LoggingGroup=_LoggingGroup;var _ImageError_static,description_fn;const _ImageError=class _ImageError extends Error{constructor(code,cause){super(),this.code=code,this.cause=cause,this.name=`ImageError(${this.code})`,this.message=this.toStringMessage()}static assertResponse(url,response,code){if(!(response.status<400))throw new _ImageError(code,`requested url: ${url}
response status: ${response.status}
response headers:
${JSON.stringify(response.headers)}`)}toString(){return`${this.name}: ${this.toStringMessage()}`}toStringMessage(){var _a;const message=__privateMethod(_a=_ImageError,_ImageError_static,description_fn).call(_a,this.code);return this.cause?`${message}, context:

${this.cause}`:message}};_ImageError_static=new WeakSet,description_fn=__name(function(code){switch(code){case"remote-no-url":return"remote param should be an URL";case"remote-no-ext":return"a file-extension could not be determined";case"url-request-head":return"the request to get the file-extension failed";case"url-request-get":return"the request to download the file failed";default:return"try-reloading Obsidian"}},"#description"),__privateAdd(_ImageError,_ImageError_static),__name(_ImageError,"ImageError");let ImageError=_ImageError;function compareBySpecificity(a,b){return!a.startsWith("*")&&b.startsWith("*")?-1:a.startsWith("*")&&!b.startsWith("*")?1:a.startsWith(b)?-1:b.startsWith(a)?1:a.localeCompare(b,"en")}__name(compareBySpecificity,"compareBySpecificity");function getMimeExt(mime){switch(mime){case"image/jpeg":return"jpg";case"image/tiff":return"tif";default:return mime.split(/\/|\+/gi)[1]}}__name(getMimeExt,"getMimeExt");function getDefaultExportFromCjs(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,"default")?x.default:x}__name(getDefaultExportFromCjs,"getDefaultExportFromCjs");var balancedMatch=balanced$1;function balanced$1(a,b,str){a instanceof RegExp&&(a=maybeMatch(a,str)),b instanceof RegExp&&(b=maybeMatch(b,str));var r=range(a,b,str);return r&&{start:r[0],end:r[1],pre:str.slice(0,r[0]),body:str.slice(r[0]+a.length,r[1]),post:str.slice(r[1]+b.length)}}__name(balanced$1,"balanced$1");function maybeMatch(reg,str){var m=str.match(reg);return m?m[0]:null}__name(maybeMatch,"maybeMatch");balanced$1.range=range;function range(a,b,str){var begs,beg,left,right,result,ai=str.indexOf(a),bi=str.indexOf(b,ai+1),i=ai;if(ai>=0&&bi>0){if(a===b)return[ai,bi];for(begs=[],left=str.length;i>=0&&!result;)i==ai?(begs.push(i),ai=str.indexOf(a,i+1)):begs.length==1?result=[begs.pop(),bi]:(beg=begs.pop(),beg<left&&(left=beg,right=bi),bi=str.indexOf(b,i+1)),i=ai<bi&&ai>=0?ai:bi;begs.length&&(result=[left,right])}return result}__name(range,"range");var balanced=balancedMatch,braceExpansion=expandTop,escSlash="\0SLASH"+Math.random()+"\0",escOpen="\0OPEN"+Math.random()+"\0",escClose="\0CLOSE"+Math.random()+"\0",escComma="\0COMMA"+Math.random()+"\0",escPeriod="\0PERIOD"+Math.random()+"\0";function numeric(str){return parseInt(str,10)==str?parseInt(str,10):str.charCodeAt(0)}__name(numeric,"numeric");function escapeBraces(str){return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod)}__name(escapeBraces,"escapeBraces");function unescapeBraces(str){return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".")}__name(unescapeBraces,"unescapeBraces");function parseCommaParts(str){if(!str)return[""];var parts=[],m=balanced("{","}",str);if(!m)return str.split(",");var pre=m.pre,body=m.body,post=m.post,p=pre.split(",");p[p.length-1]+="{"+body+"}";var postParts=parseCommaParts(post);return post.length&&(p[p.length-1]+=postParts.shift(),p.push.apply(p,postParts)),parts.push.apply(parts,p),parts}__name(parseCommaParts,"parseCommaParts");function expandTop(str){return str?(str.substr(0,2)==="{}"&&(str="\\{\\}"+str.substr(2)),expand(escapeBraces(str),!0).map(unescapeBraces)):[]}__name(expandTop,"expandTop");function embrace(str){return"{"+str+"}"}__name(embrace,"embrace");function isPadded(el){return/^-?0\d/.test(el)}__name(isPadded,"isPadded");function lte(i,y){return i<=y}__name(lte,"lte");function gte(i,y){return i>=y}__name(gte,"gte");function expand(str,isTop){var expansions=[],m=balanced("{","}",str);if(!m)return[str];var pre=m.pre,post=m.post.length?expand(m.post,!1):[""];if(/\$$/.test(m.pre))for(var k=0;k<post.length;k++){var expansion=pre+"{"+m.body+"}"+post[k];expansions.push(expansion)}else{var isNumericSequence=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body),isAlphaSequence=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body),isSequence=isNumericSequence||isAlphaSequence,isOptions=m.body.indexOf(",")>=0;if(!isSequence&&!isOptions)return m.post.match(/,.*\}/)?(str=m.pre+"{"+m.body+escClose+m.post,expand(str)):[str];var n;if(isSequence)n=m.body.split(/\.\./);else if(n=parseCommaParts(m.body),n.length===1&&(n=expand(n[0],!1).map(embrace),n.length===1))return post.map(function(p){return m.pre+n[0]+p});var N;if(isSequence){var x=numeric(n[0]),y=numeric(n[1]),width=Math.max(n[0].length,n[1].length),incr=n.length==3?Math.abs(numeric(n[2])):1,test=lte,reverse=y<x;reverse&&(incr*=-1,test=gte);var pad=n.some(isPadded);N=[];for(var i=x;test(i,y);i+=incr){var c;if(isAlphaSequence)c=String.fromCharCode(i),c==="\\"&&(c="");else if(c=String(i),pad){var need=width-c.length;if(need>0){var z=new Array(need+1).join("0");i<0?c="-"+z+c.slice(1):c=z+c}}N.push(c)}}else{N=[];for(var j=0;j<n.length;j++)N.push.apply(N,expand(n[j],!1))}for(var j=0;j<N.length;j++)for(var k=0;k<post.length;k++){var expansion=pre+N[j]+post[k];(!isTop||isSequence||expansion)&&expansions.push(expansion)}}return expansions}__name(expand,"expand");const expand$1=getDefaultExportFromCjs(braceExpansion),MAX_PATTERN_LENGTH=1024*64,assertValidPattern=__name(pattern=>{if(typeof pattern!="string")throw new TypeError("invalid pattern");if(pattern.length>MAX_PATTERN_LENGTH)throw new TypeError("pattern is too long")},"assertValidPattern"),posixClasses={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},braceEscape=__name(s=>s.replace(/[[\]\\-]/g,"\\$&"),"braceEscape"),regexpEscape=__name(s=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regexpEscape"),rangesToString=__name(ranges=>ranges.join(""),"rangesToString"),parseClass=__name((glob,position)=>{const pos=position;if(glob.charAt(pos)!=="[")throw new Error("not in a brace expression");const ranges=[],negs=[];let i=pos+1,sawStart=!1,uflag=!1,escaping=!1,negate=!1,endPos=pos,rangeStart="";WHILE:for(;i<glob.length;){const c=glob.charAt(i);if((c==="!"||c==="^")&&i===pos+1){negate=!0,i++;continue}if(c==="]"&&sawStart&&!escaping){endPos=i+1;break}if(sawStart=!0,c==="\\"&&!escaping){escaping=!0,i++;continue}if(c==="["&&!escaping){for(const[cls,[unip,u,neg]]of Object.entries(posixClasses))if(glob.startsWith(cls,i)){if(rangeStart)return["$.",!1,glob.length-pos,!0];i+=cls.length,neg?negs.push(unip):ranges.push(unip),uflag=uflag||u;continue WHILE}}if(escaping=!1,rangeStart){c>rangeStart?ranges.push(braceEscape(rangeStart)+"-"+braceEscape(c)):c===rangeStart&&ranges.push(braceEscape(c)),rangeStart="",i++;continue}if(glob.startsWith("-]",i+1)){ranges.push(braceEscape(c+"-")),i+=2;continue}if(glob.startsWith("-",i+1)){rangeStart=c,i+=2;continue}ranges.push(braceEscape(c)),i++}if(endPos<i)return["",!1,0,!1];if(!ranges.length&&!negs.length)return["$.",!1,glob.length-pos,!0];if(negs.length===0&&ranges.length===1&&/^\\?.$/.test(ranges[0])&&!negate){const r=ranges[0].length===2?ranges[0].slice(-1):ranges[0];return[regexpEscape(r),!1,endPos-pos,!1]}const sranges="["+(negate?"^":"")+rangesToString(ranges)+"]",snegs="["+(negate?"":"^")+rangesToString(negs)+"]";return[ranges.length&&negs.length?"("+sranges+"|"+snegs+")":ranges.length?sranges:snegs,uflag,endPos-pos,!0]},"parseClass"),unescape=__name((s,{windowsPathsNoEscape=!1}={})=>windowsPathsNoEscape?s.replace(/\[([^\/\\])\]/g,"$1"):s.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1"),"unescape"),types=new Set(["!","?","+","*","@"]),isExtglobType=__name(c=>types.has(c),"isExtglobType"),startNoTraversal="(?!(?:^|/)\\.\\.?(?:$|/))",startNoDot="(?!\\.)",addPatternStart=new Set(["[","."]),justDots=new Set(["..","."]),reSpecials=new Set("().*{}+?[]^$\\!"),regExpEscape$1=__name(s=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regExpEscape$1"),qmark$1="[^/]",star$1=qmark$1+"*?",starNoEmpty=qmark$1+"+?";var _root,_hasMagic,_uflag,_parts,_parent,_parentIndex,_negs,_filledNegs,_options,_toString,_emptyExt,_AST_instances,fillNegs_fn,_AST_static,parseAST_fn,partsToRegExp_fn,parseGlob_fn;const _AST=class _AST{constructor(type,parent,options={}){__privateAdd(this,_AST_instances);__publicField(this,"type");__privateAdd(this,_root);__privateAdd(this,_hasMagic);__privateAdd(this,_uflag,!1);__privateAdd(this,_parts,[]);__privateAdd(this,_parent);__privateAdd(this,_parentIndex);__privateAdd(this,_negs);__privateAdd(this,_filledNegs,!1);__privateAdd(this,_options);__privateAdd(this,_toString);__privateAdd(this,_emptyExt,!1);this.type=type,type&&__privateSet(this,_hasMagic,!0),__privateSet(this,_parent,parent),__privateSet(this,_root,__privateGet(this,_parent)?__privateGet(__privateGet(this,_parent),_root):this),__privateSet(this,_options,__privateGet(this,_root)===this?options:__privateGet(__privateGet(this,_root),_options)),__privateSet(this,_negs,__privateGet(this,_root)===this?[]:__privateGet(__privateGet(this,_root),_negs)),type==="!"&&!__privateGet(__privateGet(this,_root),_filledNegs)&&__privateGet(this,_negs).push(this),__privateSet(this,_parentIndex,__privateGet(this,_parent)?__privateGet(__privateGet(this,_parent),_parts).length:0)}get hasMagic(){if(__privateGet(this,_hasMagic)!==void 0)return __privateGet(this,_hasMagic);for(const p of __privateGet(this,_parts))if(typeof p!="string"&&(p.type||p.hasMagic))return __privateSet(this,_hasMagic,!0);return __privateGet(this,_hasMagic)}toString(){return __privateGet(this,_toString)!==void 0?__privateGet(this,_toString):this.type?__privateSet(this,_toString,this.type+"("+__privateGet(this,_parts).map(p=>String(p)).join("|")+")"):__privateSet(this,_toString,__privateGet(this,_parts).map(p=>String(p)).join(""))}push(...parts){for(const p of parts)if(p!==""){if(typeof p!="string"&&!(p instanceof _AST&&__privateGet(p,_parent)===this))throw new Error("invalid part: "+p);__privateGet(this,_parts).push(p)}}toJSON(){const ret=this.type===null?__privateGet(this,_parts).slice().map(p=>typeof p=="string"?p:p.toJSON()):[this.type,...__privateGet(this,_parts).map(p=>p.toJSON())];return this.isStart()&&!this.type&&ret.unshift([]),this.isEnd()&&(this===__privateGet(this,_root)||__privateGet(__privateGet(this,_root),_filledNegs)&&__privateGet(this,_parent)?.type==="!")&&ret.push({}),ret}isStart(){if(__privateGet(this,_root)===this)return!0;if(!__privateGet(this,_parent)?.isStart())return!1;if(__privateGet(this,_parentIndex)===0)return!0;const p=__privateGet(this,_parent);for(let i=0;i<__privateGet(this,_parentIndex);i++){const pp=__privateGet(p,_parts)[i];if(!(pp instanceof _AST&&pp.type==="!"))return!1}return!0}isEnd(){if(__privateGet(this,_root)===this||__privateGet(this,_parent)?.type==="!")return!0;if(!__privateGet(this,_parent)?.isEnd())return!1;if(!this.type)return __privateGet(this,_parent)?.isEnd();const pl=__privateGet(this,_parent)?__privateGet(__privateGet(this,_parent),_parts).length:0;return __privateGet(this,_parentIndex)===pl-1}copyIn(part){typeof part=="string"?this.push(part):this.push(part.clone(this))}clone(parent){const c=new _AST(this.type,parent);for(const p of __privateGet(this,_parts))c.copyIn(p);return c}static fromGlob(pattern,options={}){var _a;const ast=new _AST(null,void 0,options);return __privateMethod(_a=_AST,_AST_static,parseAST_fn).call(_a,pattern,ast,0,options),ast}toMMPattern(){if(this!==__privateGet(this,_root))return __privateGet(this,_root).toMMPattern();const glob=this.toString(),[re,body,hasMagic,uflag]=this.toRegExpSource();if(!(hasMagic||__privateGet(this,_hasMagic)||__privateGet(this,_options).nocase&&!__privateGet(this,_options).nocaseMagicOnly&&glob.toUpperCase()!==glob.toLowerCase()))return body;const flags=(__privateGet(this,_options).nocase?"i":"")+(uflag?"u":"");return Object.assign(new RegExp(`^${re}$`,flags),{_src:re,_glob:glob})}get options(){return __privateGet(this,_options)}toRegExpSource(allowDot){const dot=allowDot??!!__privateGet(this,_options).dot;if(__privateGet(this,_root)===this&&__privateMethod(this,_AST_instances,fillNegs_fn).call(this),!this.type){const noEmpty=this.isStart()&&this.isEnd(),src=__privateGet(this,_parts).map(p=>{var _a;const[re,_,hasMagic,uflag]=typeof p=="string"?__privateMethod(_a=_AST,_AST_static,parseGlob_fn).call(_a,p,__privateGet(this,_hasMagic),noEmpty):p.toRegExpSource(allowDot);return __privateSet(this,_hasMagic,__privateGet(this,_hasMagic)||hasMagic),__privateSet(this,_uflag,__privateGet(this,_uflag)||uflag),re}).join("");let start2="";if(this.isStart()&&typeof __privateGet(this,_parts)[0]=="string"&&!(__privateGet(this,_parts).length===1&&justDots.has(__privateGet(this,_parts)[0]))){const aps=addPatternStart,needNoTrav=dot&&aps.has(src.charAt(0))||src.startsWith("\\.")&&aps.has(src.charAt(2))||src.startsWith("\\.\\.")&&aps.has(src.charAt(4)),needNoDot=!dot&&!allowDot&&aps.has(src.charAt(0));start2=needNoTrav?startNoTraversal:needNoDot?startNoDot:""}let end="";return this.isEnd()&&__privateGet(__privateGet(this,_root),_filledNegs)&&__privateGet(this,_parent)?.type==="!"&&(end="(?:$|\\/)"),[start2+src+end,unescape(src),__privateSet(this,_hasMagic,!!__privateGet(this,_hasMagic)),__privateGet(this,_uflag)]}const repeated=this.type==="*"||this.type==="+",start=this.type==="!"?"(?:(?!(?:":"(?:";let body=__privateMethod(this,_AST_instances,partsToRegExp_fn).call(this,dot);if(this.isStart()&&this.isEnd()&&!body&&this.type!=="!"){const s=this.toString();return __privateSet(this,_parts,[s]),this.type=null,__privateSet(this,_hasMagic,void 0),[s,unescape(this.toString()),!1,!1]}let bodyDotAllowed=!repeated||allowDot||dot||!startNoDot?"":__privateMethod(this,_AST_instances,partsToRegExp_fn).call(this,!0);bodyDotAllowed===body&&(bodyDotAllowed=""),bodyDotAllowed&&(body=`(?:${body})(?:${bodyDotAllowed})*?`);let final="";if(this.type==="!"&&__privateGet(this,_emptyExt))final=(this.isStart()&&!dot?startNoDot:"")+starNoEmpty;else{const close=this.type==="!"?"))"+(this.isStart()&&!dot&&!allowDot?startNoDot:"")+star$1+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&bodyDotAllowed?")":this.type==="*"&&bodyDotAllowed?")?":`)${this.type}`;final=start+body+close}return[final,unescape(body),__privateSet(this,_hasMagic,!!__privateGet(this,_hasMagic)),__privateGet(this,_uflag)]}};_root=new WeakMap,_hasMagic=new WeakMap,_uflag=new WeakMap,_parts=new WeakMap,_parent=new WeakMap,_parentIndex=new WeakMap,_negs=new WeakMap,_filledNegs=new WeakMap,_options=new WeakMap,_toString=new WeakMap,_emptyExt=new WeakMap,_AST_instances=new WeakSet,fillNegs_fn=__name(function(){if(this!==__privateGet(this,_root))throw new Error("should only call on root");if(__privateGet(this,_filledNegs))return this;this.toString(),__privateSet(this,_filledNegs,!0);let n;for(;n=__privateGet(this,_negs).pop();){if(n.type!=="!")continue;let p=n,pp=__privateGet(p,_parent);for(;pp;){for(let i=__privateGet(p,_parentIndex)+1;!pp.type&&i<__privateGet(pp,_parts).length;i++)for(const part of __privateGet(n,_parts)){if(typeof part=="string")throw new Error("string part in extglob AST??");part.copyIn(__privateGet(pp,_parts)[i])}p=pp,pp=__privateGet(p,_parent)}}return this},"#fillNegs"),_AST_static=new WeakSet,parseAST_fn=__name(function(str,ast,pos,opt){var _a,_b;let escaping=!1,inBrace=!1,braceStart=-1,braceNeg=!1;if(ast.type===null){let i2=pos,acc2="";for(;i2<str.length;){const c=str.charAt(i2++);if(escaping||c==="\\"){escaping=!escaping,acc2+=c;continue}if(inBrace){i2===braceStart+1?(c==="^"||c==="!")&&(braceNeg=!0):c==="]"&&!(i2===braceStart+2&&braceNeg)&&(inBrace=!1),acc2+=c;continue}else if(c==="["){inBrace=!0,braceStart=i2,braceNeg=!1,acc2+=c;continue}if(!opt.noext&&isExtglobType(c)&&str.charAt(i2)==="("){ast.push(acc2),acc2="";const ext2=new _AST(c,ast);i2=__privateMethod(_a=_AST,_AST_static,parseAST_fn).call(_a,str,ext2,i2,opt),ast.push(ext2);continue}acc2+=c}return ast.push(acc2),i2}let i=pos+1,part=new _AST(null,ast);const parts=[];let acc="";for(;i<str.length;){const c=str.charAt(i++);if(escaping||c==="\\"){escaping=!escaping,acc+=c;continue}if(inBrace){i===braceStart+1?(c==="^"||c==="!")&&(braceNeg=!0):c==="]"&&!(i===braceStart+2&&braceNeg)&&(inBrace=!1),acc+=c;continue}else if(c==="["){inBrace=!0,braceStart=i,braceNeg=!1,acc+=c;continue}if(isExtglobType(c)&&str.charAt(i)==="("){part.push(acc),acc="";const ext2=new _AST(c,part);part.push(ext2),i=__privateMethod(_b=_AST,_AST_static,parseAST_fn).call(_b,str,ext2,i,opt);continue}if(c==="|"){part.push(acc),acc="",parts.push(part),part=new _AST(null,ast);continue}if(c===")")return acc===""&&__privateGet(ast,_parts).length===0&&__privateSet(ast,_emptyExt,!0),part.push(acc),acc="",ast.push(...parts,part),i;acc+=c}return ast.type=null,__privateSet(ast,_hasMagic,void 0),__privateSet(ast,_parts,[str.substring(pos-1)]),i},"#parseAST"),partsToRegExp_fn=__name(function(dot){return __privateGet(this,_parts).map(p=>{if(typeof p=="string")throw new Error("string type in extglob ast??");const[re,_,_hasMagic2,uflag]=p.toRegExpSource(dot);return __privateSet(this,_uflag,__privateGet(this,_uflag)||uflag),re}).filter(p=>!(this.isStart()&&this.isEnd())||!!p).join("|")},"#partsToRegExp"),parseGlob_fn=__name(function(glob,hasMagic,noEmpty=!1){let escaping=!1,re="",uflag=!1;for(let i=0;i<glob.length;i++){const c=glob.charAt(i);if(escaping){escaping=!1,re+=(reSpecials.has(c)?"\\":"")+c;continue}if(c==="\\"){i===glob.length-1?re+="\\\\":escaping=!0;continue}if(c==="["){const[src,needUflag,consumed,magic]=parseClass(glob,i);if(consumed){re+=src,uflag=uflag||needUflag,i+=consumed-1,hasMagic=hasMagic||magic;continue}}if(c==="*"){noEmpty&&glob==="*"?re+=starNoEmpty:re+=star$1,hasMagic=!0;continue}if(c==="?"){re+=qmark$1,hasMagic=!0;continue}re+=regExpEscape$1(c)}return[re,unescape(glob),!!hasMagic,uflag]},"#parseGlob"),__privateAdd(_AST,_AST_static),__name(_AST,"AST");let AST=_AST;const escape=__name((s,{windowsPathsNoEscape=!1}={})=>windowsPathsNoEscape?s.replace(/[?*()[\]]/g,"[$&]"):s.replace(/[?*()[\]\\]/g,"\\$&"),"escape"),minimatch=__name((p,pattern,options={})=>(assertValidPattern(pattern),!options.nocomment&&pattern.charAt(0)==="#"?!1:new Minimatch(pattern,options).match(p)),"minimatch"),starDotExtRE=/^\*+([^+@!?\*\[\(]*)$/,starDotExtTest=__name(ext2=>f=>!f.startsWith(".")&&f.endsWith(ext2),"starDotExtTest"),starDotExtTestDot=__name(ext2=>f=>f.endsWith(ext2),"starDotExtTestDot"),starDotExtTestNocase=__name(ext2=>(ext2=ext2.toLowerCase(),f=>!f.startsWith(".")&&f.toLowerCase().endsWith(ext2)),"starDotExtTestNocase"),starDotExtTestNocaseDot=__name(ext2=>(ext2=ext2.toLowerCase(),f=>f.toLowerCase().endsWith(ext2)),"starDotExtTestNocaseDot"),starDotStarRE=/^\*+\.\*+$/,starDotStarTest=__name(f=>!f.startsWith(".")&&f.includes("."),"starDotStarTest"),starDotStarTestDot=__name(f=>f!=="."&&f!==".."&&f.includes("."),"starDotStarTestDot"),dotStarRE=/^\.\*+$/,dotStarTest=__name(f=>f!=="."&&f!==".."&&f.startsWith("."),"dotStarTest"),starRE=/^\*+$/,starTest=__name(f=>f.length!==0&&!f.startsWith("."),"starTest"),starTestDot=__name(f=>f.length!==0&&f!=="."&&f!=="..","starTestDot"),qmarksRE=/^\?+([^+@!?\*\[\(]*)?$/,qmarksTestNocase=__name(([$0,ext2=""])=>{const noext=qmarksTestNoExt([$0]);return ext2?(ext2=ext2.toLowerCase(),f=>noext(f)&&f.toLowerCase().endsWith(ext2)):noext},"qmarksTestNocase"),qmarksTestNocaseDot=__name(([$0,ext2=""])=>{const noext=qmarksTestNoExtDot([$0]);return ext2?(ext2=ext2.toLowerCase(),f=>noext(f)&&f.toLowerCase().endsWith(ext2)):noext},"qmarksTestNocaseDot"),qmarksTestDot=__name(([$0,ext2=""])=>{const noext=qmarksTestNoExtDot([$0]);return ext2?f=>noext(f)&&f.endsWith(ext2):noext},"qmarksTestDot"),qmarksTest=__name(([$0,ext2=""])=>{const noext=qmarksTestNoExt([$0]);return ext2?f=>noext(f)&&f.endsWith(ext2):noext},"qmarksTest"),qmarksTestNoExt=__name(([$0])=>{const len=$0.length;return f=>f.length===len&&!f.startsWith(".")},"qmarksTestNoExt"),qmarksTestNoExtDot=__name(([$0])=>{const len=$0.length;return f=>f.length===len&&f!=="."&&f!==".."},"qmarksTestNoExtDot"),defaultPlatform=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",path={win32:{sep:"\\"},posix:{sep:"/"}},sep=defaultPlatform==="win32"?path.win32.sep:path.posix.sep;minimatch.sep=sep;const GLOBSTAR=Symbol("globstar **");minimatch.GLOBSTAR=GLOBSTAR;const qmark="[^/]",star=qmark+"*?",twoStarDot="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",twoStarNoDot="(?:(?!(?:\\/|^)\\.).)*?",filter=__name((pattern,options={})=>p=>minimatch(p,pattern,options),"filter");minimatch.filter=filter;const ext=__name((a,b={})=>Object.assign({},a,b),"ext"),defaults=__name(def=>{var _a,_b;if(!def||typeof def!="object"||!Object.keys(def).length)return minimatch;const orig=minimatch;return Object.assign(__name((p,pattern,options={})=>orig(p,pattern,ext(def,options)),"m"),{Minimatch:(_a=class extends orig.Minimatch{constructor(pattern,options={}){super(pattern,ext(def,options))}static defaults(options){return orig.defaults(ext(def,options)).Minimatch}},__name(_a,"Minimatch"),_a),AST:(_b=class extends orig.AST{constructor(type,parent,options={}){super(type,parent,ext(def,options))}static fromGlob(pattern,options={}){return orig.AST.fromGlob(pattern,ext(def,options))}},__name(_b,"AST"),_b),unescape:__name((s,options={})=>orig.unescape(s,ext(def,options)),"unescape"),escape:__name((s,options={})=>orig.escape(s,ext(def,options)),"escape"),filter:__name((pattern,options={})=>orig.filter(pattern,ext(def,options)),"filter"),defaults:__name(options=>orig.defaults(ext(def,options)),"defaults"),makeRe:__name((pattern,options={})=>orig.makeRe(pattern,ext(def,options)),"makeRe"),braceExpand:__name((pattern,options={})=>orig.braceExpand(pattern,ext(def,options)),"braceExpand"),match:__name((list,pattern,options={})=>orig.match(list,pattern,ext(def,options)),"match"),sep:orig.sep,GLOBSTAR})},"defaults");minimatch.defaults=defaults;const braceExpand=__name((pattern,options={})=>(assertValidPattern(pattern),options.nobrace||!/\{(?:(?!\{).)*\}/.test(pattern)?[pattern]:expand$1(pattern)),"braceExpand");minimatch.braceExpand=braceExpand;const makeRe=__name((pattern,options={})=>new Minimatch(pattern,options).makeRe(),"makeRe");minimatch.makeRe=makeRe;const match=__name((list,pattern,options={})=>{const mm=new Minimatch(pattern,options);return list=list.filter(f=>mm.match(f)),mm.options.nonull&&!list.length&&list.push(pattern),list},"match");minimatch.match=match;const globMagic=/[?*]|[+@!]\(.*?\)|\[|\]/,regExpEscape=__name(s=>s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"regExpEscape"),_Minimatch=class _Minimatch{constructor(pattern,options={}){__publicField(this,"options");__publicField(this,"set");__publicField(this,"pattern");__publicField(this,"windowsPathsNoEscape");__publicField(this,"nonegate");__publicField(this,"negate");__publicField(this,"comment");__publicField(this,"empty");__publicField(this,"preserveMultipleSlashes");__publicField(this,"partial");__publicField(this,"globSet");__publicField(this,"globParts");__publicField(this,"nocase");__publicField(this,"isWindows");__publicField(this,"platform");__publicField(this,"windowsNoMagicRoot");__publicField(this,"regexp");assertValidPattern(pattern),options=options||{},this.options=options,this.pattern=pattern,this.platform=options.platform||defaultPlatform,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!options.windowsPathsNoEscape||options.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!options.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!options.nonegate,this.comment=!1,this.empty=!1,this.partial=!!options.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=options.windowsNoMagicRoot!==void 0?options.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(const pattern of this.set)for(const part of pattern)if(typeof part!="string")return!0;return!1}debug(..._){}make(){const pattern=this.pattern,options=this.options;if(!options.nocomment&&pattern.charAt(0)==="#"){this.comment=!0;return}if(!pattern){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],options.debug&&(this.debug=(...args)=>console.error(...args)),this.debug(this.pattern,this.globSet);const rawGlobParts=this.globSet.map(s=>this.slashSplit(s));this.globParts=this.preprocess(rawGlobParts),this.debug(this.pattern,this.globParts);let set=this.globParts.map((s,_,__)=>{if(this.isWindows&&this.windowsNoMagicRoot){const isUNC=s[0]===""&&s[1]===""&&(s[2]==="?"||!globMagic.test(s[2]))&&!globMagic.test(s[3]),isDrive=/^[a-z]:/i.test(s[0]);if(isUNC)return[...s.slice(0,4),...s.slice(4).map(ss=>this.parse(ss))];if(isDrive)return[s[0],...s.slice(1).map(ss=>this.parse(ss))]}return s.map(ss=>this.parse(ss))});if(this.debug(this.pattern,set),this.set=set.filter(s=>s.indexOf(!1)===-1),this.isWindows)for(let i=0;i<this.set.length;i++){const p=this.set[i];p[0]===""&&p[1]===""&&this.globParts[i][2]==="?"&&typeof p[3]=="string"&&/^[a-z]:$/i.test(p[3])&&(p[2]="?")}this.debug(this.pattern,this.set)}preprocess(globParts){if(this.options.noglobstar)for(let i=0;i<globParts.length;i++)for(let j=0;j<globParts[i].length;j++)globParts[i][j]==="**"&&(globParts[i][j]="*");const{optimizationLevel=1}=this.options;return optimizationLevel>=2?(globParts=this.firstPhasePreProcess(globParts),globParts=this.secondPhasePreProcess(globParts)):optimizationLevel>=1?globParts=this.levelOneOptimize(globParts):globParts=this.adjascentGlobstarOptimize(globParts),globParts}adjascentGlobstarOptimize(globParts){return globParts.map(parts=>{let gs=-1;for(;(gs=parts.indexOf("**",gs+1))!==-1;){let i=gs;for(;parts[i+1]==="**";)i++;i!==gs&&parts.splice(gs,i-gs)}return parts})}levelOneOptimize(globParts){return globParts.map(parts=>(parts=parts.reduce((set,part)=>{const prev=set[set.length-1];return part==="**"&&prev==="**"?set:part===".."&&prev&&prev!==".."&&prev!=="."&&prev!=="**"?(set.pop(),set):(set.push(part),set)},[]),parts.length===0?[""]:parts))}levelTwoFileOptimize(parts){Array.isArray(parts)||(parts=this.slashSplit(parts));let didSomething=!1;do{if(didSomething=!1,!this.preserveMultipleSlashes){for(let i=1;i<parts.length-1;i++){const p=parts[i];i===1&&p===""&&parts[0]===""||(p==="."||p==="")&&(didSomething=!0,parts.splice(i,1),i--)}parts[0]==="."&&parts.length===2&&(parts[1]==="."||parts[1]==="")&&(didSomething=!0,parts.pop())}let dd=0;for(;(dd=parts.indexOf("..",dd+1))!==-1;){const p=parts[dd-1];p&&p!=="."&&p!==".."&&p!=="**"&&(didSomething=!0,parts.splice(dd-1,2),dd-=2)}}while(didSomething);return parts.length===0?[""]:parts}firstPhasePreProcess(globParts){let didSomething=!1;do{didSomething=!1;for(let parts of globParts){let gs=-1;for(;(gs=parts.indexOf("**",gs+1))!==-1;){let gss=gs;for(;parts[gss+1]==="**";)gss++;gss>gs&&parts.splice(gs+1,gss-gs);let next=parts[gs+1];const p=parts[gs+2],p2=parts[gs+3];if(next!==".."||!p||p==="."||p===".."||!p2||p2==="."||p2==="..")continue;didSomething=!0,parts.splice(gs,1);const other=parts.slice(0);other[gs]="**",globParts.push(other),gs--}if(!this.preserveMultipleSlashes){for(let i=1;i<parts.length-1;i++){const p=parts[i];i===1&&p===""&&parts[0]===""||(p==="."||p==="")&&(didSomething=!0,parts.splice(i,1),i--)}parts[0]==="."&&parts.length===2&&(parts[1]==="."||parts[1]==="")&&(didSomething=!0,parts.pop())}let dd=0;for(;(dd=parts.indexOf("..",dd+1))!==-1;){const p=parts[dd-1];if(p&&p!=="."&&p!==".."&&p!=="**"){didSomething=!0;const splin=dd===1&&parts[dd+1]==="**"?["."]:[];parts.splice(dd-1,2,...splin),parts.length===0&&parts.push(""),dd-=2}}}}while(didSomething);return globParts}secondPhasePreProcess(globParts){for(let i=0;i<globParts.length-1;i++)for(let j=i+1;j<globParts.length;j++){const matched=this.partsMatch(globParts[i],globParts[j],!this.preserveMultipleSlashes);if(matched){globParts[i]=[],globParts[j]=matched;break}}return globParts.filter(gs=>gs.length)}partsMatch(a,b,emptyGSMatch=!1){let ai=0,bi=0,result=[],which="";for(;ai<a.length&&bi<b.length;)if(a[ai]===b[bi])result.push(which==="b"?b[bi]:a[ai]),ai++,bi++;else if(emptyGSMatch&&a[ai]==="**"&&b[bi]===a[ai+1])result.push(a[ai]),ai++;else if(emptyGSMatch&&b[bi]==="**"&&a[ai]===b[bi+1])result.push(b[bi]),bi++;else if(a[ai]==="*"&&b[bi]&&(this.options.dot||!b[bi].startsWith("."))&&b[bi]!=="**"){if(which==="b")return!1;which="a",result.push(a[ai]),ai++,bi++}else if(b[bi]==="*"&&a[ai]&&(this.options.dot||!a[ai].startsWith("."))&&a[ai]!=="**"){if(which==="a")return!1;which="b",result.push(b[bi]),ai++,bi++}else return!1;return a.length===b.length&&result}parseNegate(){if(this.nonegate)return;const pattern=this.pattern;let negate=!1,negateOffset=0;for(let i=0;i<pattern.length&&pattern.charAt(i)==="!";i++)negate=!negate,negateOffset++;negateOffset&&(this.pattern=pattern.slice(negateOffset)),this.negate=negate}matchOne(file,pattern,partial=!1){const options=this.options;if(this.isWindows){const fileDrive=typeof file[0]=="string"&&/^[a-z]:$/i.test(file[0]),fileUNC=!fileDrive&&file[0]===""&&file[1]===""&&file[2]==="?"&&/^[a-z]:$/i.test(file[3]),patternDrive=typeof pattern[0]=="string"&&/^[a-z]:$/i.test(pattern[0]),patternUNC=!patternDrive&&pattern[0]===""&&pattern[1]===""&&pattern[2]==="?"&&typeof pattern[3]=="string"&&/^[a-z]:$/i.test(pattern[3]),fdi=fileUNC?3:fileDrive?0:void 0,pdi=patternUNC?3:patternDrive?0:void 0;if(typeof fdi=="number"&&typeof pdi=="number"){const[fd,pd]=[file[fdi],pattern[pdi]];fd.toLowerCase()===pd.toLowerCase()&&(pattern[pdi]=fd,pdi>fdi?pattern=pattern.slice(pdi):fdi>pdi&&(file=file.slice(fdi)))}}const{optimizationLevel=1}=this.options;optimizationLevel>=2&&(file=this.levelTwoFileOptimize(file)),this.debug("matchOne",this,{file,pattern}),this.debug("matchOne",file.length,pattern.length);for(var fi=0,pi=0,fl=file.length,pl=pattern.length;fi<fl&&pi<pl;fi++,pi++){this.debug("matchOne loop");var p=pattern[pi],f=file[fi];if(this.debug(pattern,p,f),p===!1)return!1;if(p===GLOBSTAR){this.debug("GLOBSTAR",[pattern,p,f]);var fr=fi,pr=pi+1;if(pr===pl){for(this.debug("** at the end");fi<fl;fi++)if(file[fi]==="."||file[fi]===".."||!options.dot&&file[fi].charAt(0)===".")return!1;return!0}for(;fr<fl;){var swallowee=file[fr];if(this.debug(`
globstar while`,file,fr,pattern,pr,swallowee),this.matchOne(file.slice(fr),pattern.slice(pr),partial))return this.debug("globstar found match!",fr,fl,swallowee),!0;if(swallowee==="."||swallowee===".."||!options.dot&&swallowee.charAt(0)==="."){this.debug("dot detected!",file,fr,pattern,pr);break}this.debug("globstar swallow a segment, and continue"),fr++}return!!(partial&&(this.debug(`
>>> no match, partial?`,file,fr,pattern,pr),fr===fl))}let hit;if(typeof p=="string"?(hit=f===p,this.debug("string match",p,f,hit)):(hit=p.test(f),this.debug("pattern match",p,f,hit)),!hit)return!1}if(fi===fl&&pi===pl)return!0;if(fi===fl)return partial;if(pi===pl)return fi===fl-1&&file[fi]==="";throw new Error("wtf?")}braceExpand(){return braceExpand(this.pattern,this.options)}parse(pattern){assertValidPattern(pattern);const options=this.options;if(pattern==="**")return GLOBSTAR;if(pattern==="")return"";let m,fastTest=null;(m=pattern.match(starRE))?fastTest=options.dot?starTestDot:starTest:(m=pattern.match(starDotExtRE))?fastTest=(options.nocase?options.dot?starDotExtTestNocaseDot:starDotExtTestNocase:options.dot?starDotExtTestDot:starDotExtTest)(m[1]):(m=pattern.match(qmarksRE))?fastTest=(options.nocase?options.dot?qmarksTestNocaseDot:qmarksTestNocase:options.dot?qmarksTestDot:qmarksTest)(m):(m=pattern.match(starDotStarRE))?fastTest=options.dot?starDotStarTestDot:starDotStarTest:(m=pattern.match(dotStarRE))&&(fastTest=dotStarTest);const re=AST.fromGlob(pattern,this.options).toMMPattern();return fastTest&&typeof re=="object"&&Reflect.defineProperty(re,"test",{value:fastTest}),re}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;const set=this.set;if(!set.length)return this.regexp=!1,this.regexp;const options=this.options,twoStar=options.noglobstar?star:options.dot?twoStarDot:twoStarNoDot,flags=new Set(options.nocase?["i"]:[]);let re=set.map(pattern=>{const pp=pattern.map(p=>{if(p instanceof RegExp)for(const f of p.flags.split(""))flags.add(f);return typeof p=="string"?regExpEscape(p):p===GLOBSTAR?GLOBSTAR:p._src});return pp.forEach((p,i)=>{const next=pp[i+1],prev=pp[i-1];p!==GLOBSTAR||prev===GLOBSTAR||(prev===void 0?next!==void 0&&next!==GLOBSTAR?pp[i+1]="(?:\\/|"+twoStar+"\\/)?"+next:pp[i]=twoStar:next===void 0?pp[i-1]=prev+"(?:\\/|"+twoStar+")?":next!==GLOBSTAR&&(pp[i-1]=prev+"(?:\\/|\\/"+twoStar+"\\/)"+next,pp[i+1]=GLOBSTAR))}),pp.filter(p=>p!==GLOBSTAR).join("/")}).join("|");const[open,close]=set.length>1?["(?:",")"]:["",""];re="^"+open+re+close+"$",this.negate&&(re="^(?!"+re+").+$");try{this.regexp=new RegExp(re,[...flags].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(p){return this.preserveMultipleSlashes?p.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(p)?["",...p.split(/\/+/)]:p.split(/\/+/)}match(f,partial=this.partial){if(this.debug("match",f,this.pattern),this.comment)return!1;if(this.empty)return f==="";if(f==="/"&&partial)return!0;const options=this.options;this.isWindows&&(f=f.split("\\").join("/"));const ff=this.slashSplit(f);this.debug(this.pattern,"split",ff);const set=this.set;this.debug(this.pattern,"set",set);let filename=ff[ff.length-1];if(!filename)for(let i=ff.length-2;!filename&&i>=0;i--)filename=ff[i];for(let i=0;i<set.length;i++){const pattern=set[i];let file=ff;if(options.matchBase&&pattern.length===1&&(file=[filename]),this.matchOne(file,pattern,partial))return options.flipNegate?!0:!this.negate}return options.flipNegate?!1:this.negate}static defaults(def){return minimatch.defaults(def).Minimatch}};__name(_Minimatch,"Minimatch");let Minimatch=_Minimatch;minimatch.AST=AST;minimatch.Minimatch=Minimatch;minimatch.escape=escape;minimatch.unescape=unescape;function prepareRemotes(remotes){const result=[];let hasFallback=!1;for(const a of remotes)result.every(b=>b.pattern!==a.pattern)&&(a.pattern==="*"&&(hasFallback=!0),result.push(a));return hasFallback||result.push({pattern:"*",whitelisted:!1}),result.sort((a,b)=>compareBySpecificity(a.pattern,b.pattern))}__name(prepareRemotes,"prepareRemotes");function serializeRemotes(remotes){return remotes.map(({whitelisted,pattern})=>`${whitelisted?"w":"b"} ${pattern}`).join(`
`)}__name(serializeRemotes,"serializeRemotes");function parseRemote(source){if(!/\s+/.test(source))return[source,void 0];const parts=source.split(/\s+/g);return parts[0].startsWith("w")?[parts[1],!0]:parts[0].startsWith("b")?[parts[1],!1]:[parts[1],void 0]}__name(parseRemote,"parseRemote");function parseRemotes(remotes,sources){const result=[];let hasFallback=!1;for(const source of sources.split(/\n+/g)){const[pattern,w]=parseRemote(source);if(pattern==="*"&&(hasFallback=!0),!result.some(b=>b.pattern===pattern)){if(w!==void 0){result.push({pattern,whitelisted:w});continue}for(const s of remotes){if(pattern===s.pattern){result.push({pattern,whitelisted:s.whitelisted});break}if(Math.abs(pattern.length-s.pattern.length)===1){if(s.pattern.startsWith(pattern)){result.push({pattern,whitelisted:s.whitelisted});break}else if(pattern.startsWith(s.pattern)){result.push({pattern,whitelisted:s.whitelisted});break}}}result.some(b=>b.pattern===pattern)||result.push({pattern,whitelisted:!1})}}return hasFallback||result.push({pattern:"*",whitelisted:!1}),result.sort((a,b)=>compareBySpecificity(a.pattern,b.pattern))}__name(parseRemotes,"parseRemotes");function checkRemotes(sources){const problems=[];let hasFallback=!1;for(const source of sources.split(/\n+/g)){const trimmed=source.trim().replace(/^[wb]\s+/,"");if(trimmed==="*"){hasFallback=!0;continue}/^\w+:/gi.test(trimmed)&&problems.push("remove protocols, ex: 'http://'"),/^(\w+\.)+\w+/.test(trimmed)||problems.push("should include domain, ex: 'example.org/path'")}return hasFallback||problems.unshift("should include a fallback '*'"),problems}__name(checkRemotes,"checkRemotes");function prepareRemoteMatcher(url_param="fallback_param"){const regex=new RegExp("[?&]"+url_param+"([&=\\s]|$)","i");return remote=>regex.test(remote)}__name(prepareRemoteMatcher,"prepareRemoteMatcher");async function getRemoteExt(url){const referer=URL.getOrigin(url),response=await obsidian.requestUrl({url,throw:!1,method:"HEAD",headers:{Referer:referer?referer+"/":""}});return ImageError.assertResponse(url,response,"url-request-head"),getMimeExt(response.headers["content-type"])}__name(getRemoteExt,"getRemoteExt");async function getRemoteContent(url){const referer=URL.getOrigin(url),response=await obsidian.requestUrl({url,throw:!1,method:"GET",headers:{Referer:referer?referer+"/":""}});return ImageError.assertResponse(url,response,"url-request-get"),response.arrayBuffer}__name(getRemoteContent,"getRemoteContent");function prepareConfigMatchers(configs){return configs.map(config=>{let resolve=__name(_path=>URI.getParent(_path),"resolve");switch(config.mode){case"NOTE-FOLDER":resolve=__name(_path=>URI.join(URI.getParent(_path),config.target),"resolve");break;case"TARGET-PATH":resolve=__name(_path=>URI.join(config.target,URI.removeExt(_path)),"resolve");break;case"TARGET-NOTE":resolve=__name(_path=>URI.join(config.target,URI.getBasename(_path)),"resolve");break;case"TARGET":resolve=__name(_path=>config.target,"resolve");break}const testPath=config.pattern!=="*"?_notepath=>minimatch(_notepath,config.pattern):_notepath=>!0,testRemote=__name(_remote=>{for(const{pattern,whitelisted}of config.remotes)if(pattern==="*"||new RegExp("^https?://(\\w+\\.)*"+pattern,"g").test(_remote))return whitelisted;return!1},"testRemote");return{source:Object.freeze(config),isEnabled:__name(()=>config.enabled,"isEnabled"),testRemote,testPath,resolve}})}__name(prepareConfigMatchers,"prepareConfigMatchers");function prepareConfigs(configs){const result=[];for(const a of configs){const bIndex=result.findIndex(b=>b.pattern===a.pattern);if(bIndex===-1){result.push({...a,remotes:prepareRemotes(a.remotes)});continue}a.remotes.length>result[bIndex].remotes.length&&(result[bIndex]={...a,remotes:prepareRemotes(a.remotes)})}return result.sort((a,b)=>compareBySpecificity(a.pattern,b.pattern))}__name(prepareConfigs,"prepareConfigs");function checkPattern(configs,_value){if(!_value)return["invalid pattern"];for(const config of configs)if(config.pattern===_value)return[`duplicated pattern '${_value}'`];return[]}__name(checkPattern,"checkPattern");const MODES={NOTE:"Attachments next to the Note","NOTE-FOLDER":"Attachments on Subfolder",TARGET:"Attachments on Cache Folder","TARGET-NOTE":"Attachments on Cache Note Folder","TARGET-PATH":"Attachments on Cache Note Path"},MODES_DESC={NOTE:"Store in the same folder as the note","NOTE-FOLDER":"Store next to the note in subfolder ",TARGET:"Store in folder ","TARGET-NOTE":"Store in subfolder with the note-name under ","TARGET-PATH":"Store in a replated note-path under "};var _cache,_cacheHeader,_cacheDetails,_cacheRemotes,_remotesText,_CacheSettings_instances,cacheName_fn,cacheDesc_fn,displayCacheHeader_fn,targetDesc_fn,displayCacheDetails_fn,remoteName_fn,displayCacheRemotes_fn,updateRemotes_fn,_changeListeners,_removeListeners,invokeChange_fn,invokeRemove_fn;const _CacheSettings=class _CacheSettings{constructor(parent,cache){__privateAdd(this,_CacheSettings_instances);__privateAdd(this,_cache);__privateAdd(this,_cacheHeader);__privateAdd(this,_cacheDetails);__privateAdd(this,_cacheRemotes);__privateAdd(this,_remotesText);__privateAdd(this,_changeListeners,[]);__privateAdd(this,_removeListeners,[]);__privateSet(this,_cache,{...cache,remotes:[...cache.remotes]}),__privateSet(this,_cacheHeader,new obsidian.Setting(parent)),__privateSet(this,_cacheDetails,__privateGet(this,_cacheHeader).settingEl.createDiv("cache-details")),__privateSet(this,_cacheRemotes,__privateGet(this,_cacheHeader).settingEl.createDiv("cache-remotes")),__privateMethod(this,_CacheSettings_instances,displayCacheHeader_fn).call(this),__privateMethod(this,_CacheSettings_instances,displayCacheDetails_fn).call(this),__privateMethod(this,_CacheSettings_instances,displayCacheRemotes_fn).call(this)}onChange(callback){return __privateGet(this,_changeListeners).push(callback),this}onRemove(callback){return __privateGet(this,_removeListeners).push(callback),this}};_cache=new WeakMap,_cacheHeader=new WeakMap,_cacheDetails=new WeakMap,_cacheRemotes=new WeakMap,_remotesText=new WeakMap,_CacheSettings_instances=new WeakSet,cacheName_fn=__name(function(){return createFragment(div=>{div.append(`${__privateGet(this,_cache).enabled?"Enabled":"Disabled"} path: `),div.createEl("code").appendText(__privateGet(this,_cache).pattern)})},"#cacheName"),cacheDesc_fn=__name(function(){return __privateGet(this,_cache).mode==="NOTE"?MODES_DESC.NOTE:createFragment(div=>{div.append(MODES_DESC[__privateGet(this,_cache).mode]),div.createEl("code").appendText(__privateGet(this,_cache).target)})},"#cacheDesc"),displayCacheHeader_fn=__name(function(){__privateGet(this,_cacheHeader).setName(__privateMethod(this,_CacheSettings_instances,cacheName_fn).call(this)),__privateGet(this,_cacheHeader).setDesc(__privateMethod(this,_CacheSettings_instances,cacheDesc_fn).call(this)),__privateGet(this,_cache).pattern!=="*"&&__privateGet(this,_cacheHeader).addExtraButton(button=>{button.setIcon("trash-2").setTooltip("Remove"),button.onClick(()=>{if(__privateGet(this,_cache).pattern==="*"){console.warn("fallback config('*') can't be removed");return}__privateGet(this,_cacheHeader).clear(),__privateGet(this,_cacheHeader).settingEl.remove(),__privateMethod(this,_CacheSettings_instances,invokeRemove_fn).call(this)})}),__privateGet(this,_cacheHeader).addToggle(toggle=>{toggle.setValue(__privateGet(this,_cache).enabled),toggle.onChange(value=>{__privateGet(this,_cache).enabled=value,__privateMethod(this,_CacheSettings_instances,invokeChange_fn).call(this),__privateGet(this,_cacheHeader).setName(__privateMethod(this,_CacheSettings_instances,cacheName_fn).call(this))})}),__privateGet(this,_cacheHeader).addExtraButton(button=>{let visible=!1;button.setIcon("chevron-down").setTooltip("Details"),button.onClick(()=>{visible=!visible,visible?(button.setIcon("chevron-up"),__privateGet(this,_cacheHeader).settingEl.addClass("show-details")):(button.setIcon("chevron-down"),__privateGet(this,_cacheHeader).settingEl.removeClass("show-details"))})})},"#displayCacheHeader"),targetDesc_fn=__name(function(){return createFragment(div=>{div.append("Attachments storage path, ex:");const ul=div.createEl("ul"),note=ul.createEl("li");note.append("Note: '"),note.createEl("b").appendText("folder/note1.md"),note.append("'");const attachment=ul.createEl("li");attachment.append("Attachment: '");const b=attachment.createEl("b"),{mode,target}=__privateGet(this,_cache);mode==="NOTE"?b.appendText("folder/img1.jpg"):mode==="NOTE-FOLDER"?b.appendText(`folder/${target}/img1.jpg`):mode==="TARGET"?b.appendText(`${target}/img1.jpg`):mode==="TARGET-NOTE"?b.appendText(`${target}/note1/img1.jpg`):mode==="TARGET-PATH"&&b.appendText(`${target}/folder/note1/img1.jpg`),attachment.append("'")})},"#targetDesc"),displayCacheDetails_fn=__name(function(){let targetInput;const cacheSetting=new obsidian.Setting(__privateGet(this,_cacheDetails));cacheSetting.setName("Attachments Storage"),cacheSetting.setDesc(__privateMethod(this,_CacheSettings_instances,targetDesc_fn).call(this)),cacheSetting.addDropdown(dropdown=>{dropdown.addOptions(MODES),dropdown.setValue(__privateGet(this,_cache).mode),dropdown.onChange(value=>{__privateGet(this,_cache).mode=value,__privateMethod(this,_CacheSettings_instances,invokeChange_fn).call(this),cacheSetting.setDesc(__privateMethod(this,_CacheSettings_instances,targetDesc_fn).call(this)),__privateGet(this,_cache).mode==="NOTE"?(targetInput?.setDisabled(!0),targetInput?.setValue("")):(targetInput?.setDisabled(!1),targetInput?.setValue(__privateGet(this,_cache).target))})}),cacheSetting.addText(input=>{targetInput=input,__privateGet(this,_cache).mode==="NOTE"?input.setDisabled(!0):input.setValue(__privateGet(this,_cache).target),input.onChange(value=>{__privateGet(this,_cache).target=value,__privateMethod(this,_CacheSettings_instances,invokeChange_fn).call(this),cacheSetting.setDesc(__privateMethod(this,_CacheSettings_instances,targetDesc_fn).call(this))})});const remotesDesc=createFragment(),remotesDescUl=remotesDesc.createEl("ul"),remotesSetting=new obsidian.Setting(__privateGet(this,_cacheDetails));remotesSetting.setClass("remotes-input"),remotesSetting.setName("Remotes List"),remotesSetting.setDesc(remotesDesc),remotesSetting.addTextArea(textarea=>{__privateSet(this,_remotesText,textarea),textarea.setValue(serializeRemotes(__privateGet(this,_cache).remotes)),textarea.onChange(value=>{remotesDescUl.empty();const problems=checkRemotes(value);if(problems.length>0){problems.forEach(p=>remotesDescUl.createEl("li").appendText(p));return}__privateGet(this,_cache).remotes=parseRemotes(__privateGet(this,_cache).remotes,value),__privateMethod(this,_CacheSettings_instances,invokeChange_fn).call(this),__privateMethod(this,_CacheSettings_instances,displayCacheRemotes_fn).call(this)})})},"#displayCacheDetails"),remoteName_fn=__name(function(r){return createFragment(div=>{div.append(`${r.whitelisted?"Whitelisted":"Blacklisted"} remote: `),div.createEl("code").appendText(r.pattern)})},"#remoteName"),displayCacheRemotes_fn=__name(function(){__privateGet(this,_cacheRemotes).empty();for(const remote of __privateGet(this,_cache).remotes){const setting=new obsidian.Setting(__privateGet(this,_cacheRemotes));setting.setName(__privateMethod(this,_CacheSettings_instances,remoteName_fn).call(this,remote)),remote.pattern!=="*"&&setting.addExtraButton(button=>{button.setIcon("trash-2").setTooltip("Remove"),button.onClick(()=>{const remotes=__privateGet(this,_cache).remotes.filter(r=>r.pattern!==remote.pattern);__privateMethod(this,_CacheSettings_instances,updateRemotes_fn).call(this,remotes)})}),setting.addButton(button=>{button.setButtonText(remote.whitelisted?"Blacklist":"Whitelist"),button.onClick(()=>{const remotes=__privateGet(this,_cache).remotes.map(r=>r.pattern!==remote.pattern?r:{...r,whitelisted:!r.whitelisted});__privateMethod(this,_CacheSettings_instances,updateRemotes_fn).call(this,remotes)})})}},"#displayCacheRemotes"),updateRemotes_fn=__name(function(remotes){__privateGet(this,_cache).remotes=remotes,__privateMethod(this,_CacheSettings_instances,invokeChange_fn).call(this),__privateGet(this,_remotesText)?.setValue(serializeRemotes(remotes)),__privateMethod(this,_CacheSettings_instances,displayCacheRemotes_fn).call(this)},"#updateRemotes"),_changeListeners=new WeakMap,_removeListeners=new WeakMap,invokeChange_fn=__name(function(){for(const listener of __privateGet(this,_changeListeners))listener(__privateGet(this,_cache))},"#invokeChange"),invokeRemove_fn=__name(function(){for(const listener of __privateGet(this,_removeListeners))listener(__privateGet(this,_cache))},"#invokeRemove"),__name(_CacheSettings,"CacheSettings");let CacheSettings=_CacheSettings;var _plugin,_settings,_configsList,_SettingsTab_instances,newSetting_fn,newSettingAt_fn,displayGeneralSettings_fn,displayConfigsHeader_fn,displayConfigsList_fn,handle_fn,updateConfigs_fn;const _SettingsTab=class _SettingsTab extends obsidian.PluginSettingTab{constructor(plugin){super(plugin.app,plugin);__privateAdd(this,_SettingsTab_instances);__privateAdd(this,_plugin);__privateAdd(this,_settings);__privateAdd(this,_configsList);__privateSet(this,_plugin,plugin),__privateSet(this,_settings,plugin.settings)}hide(){}display(){this.containerEl.empty(),this.containerEl.addClass("image-caching-settings"),__privateMethod(this,_SettingsTab_instances,displayGeneralSettings_fn).call(this),__privateMethod(this,_SettingsTab_instances,newSetting_fn).call(this).setName("Paths Settings").setHeading(),__privateMethod(this,_SettingsTab_instances,displayConfigsHeader_fn).call(this),__privateSet(this,_configsList,this.containerEl.createDiv("configs-list")),__privateMethod(this,_SettingsTab_instances,displayConfigsList_fn).call(this)}};_plugin=new WeakMap,_settings=new WeakMap,_configsList=new WeakMap,_SettingsTab_instances=new WeakSet,newSetting_fn=__name(function(){return __privateMethod(this,_SettingsTab_instances,newSettingAt_fn).call(this,this.containerEl)},"#newSetting"),newSettingAt_fn=__name(function(container){return new obsidian.Setting(container)},"#newSettingAt"),displayGeneralSettings_fn=__name(function(){const charsSetting=__privateMethod(this,_SettingsTab_instances,newSetting_fn).call(this);charsSetting.setName("Keep Special Characters"),charsSetting.setDesc("If you are having problems with special characters on image paths, disable this setting."),charsSetting.addToggle(toggle=>{toggle.setValue(__privateGet(this,_settings).allow_characters),toggle.onChange(__privateMethod(this,_SettingsTab_instances,handle_fn).bind(this,"allow_characters"))});const urlcacheSetting=__privateMethod(this,_SettingsTab_instances,newSetting_fn).call(this);urlcacheSetting.setName("URL Param Cache"),urlcacheSetting.setDesc("Overrides standard rules and stores the file."),urlcacheSetting.addText(input=>{input.setValue(__privateGet(this,_settings).url_param_cache),input.onChange(__privateMethod(this,_SettingsTab_instances,handle_fn).bind(this,"url_param_cache"))});const urlignoreSetting=__privateMethod(this,_SettingsTab_instances,newSetting_fn).call(this);urlignoreSetting.setName("URL Param Ignore"),urlignoreSetting.setDesc("Overrides standard rules and ignores the file."),urlignoreSetting.addText(input=>{input.setValue(__privateGet(this,_settings).url_param_ignore),input.onChange(__privateMethod(this,_SettingsTab_instances,handle_fn).bind(this,"url_param_ignore"))})},"#displayGeneralSettings"),displayConfigsHeader_fn=__name(function(){let patternInput=null,sourceDropdown=null,duplicateButton=null;const headerDesc=createFragment(),headerDescUl=headerDesc.createEl("ul"),headerEl=__privateMethod(this,_SettingsTab_instances,newSetting_fn).call(this);headerEl.setClass("configs-header"),headerEl.setName("Duplicate Vault Path"),headerEl.setDesc(headerDesc),headerEl.addText(input=>{patternInput=input,input.setPlaceholder("glob: **/*.md"),input.onChange(value=>{if(headerDescUl.empty(),!value){duplicateButton?.setDisabled(!0);return}const problems=checkPattern(__privateGet(this,_settings).cache_configs,value);if(problems.length>0){problems.forEach(p=>headerDescUl.createEl("li").appendText(p));return}duplicateButton?.setDisabled(problems.length>0)})}),headerEl.addDropdown(dropdown=>{sourceDropdown=dropdown,dropdown.setValue("*");for(const config of __privateGet(this,_settings).cache_configs)dropdown.addOption(config.pattern,config.pattern)}),headerEl.addButton(button=>{duplicateButton=button,button.setButtonText("Duplicate"),button.setDisabled(!0),button.onClick(()=>{const match2=patternInput?.getValue(),ref=sourceDropdown?.getValue()||"*",src=__privateGet(this,_settings).cache_configs.find(i=>i.pattern===ref);if(!match2||!src){console.warn("unexpected state");return}const configs=__privateGet(this,_settings).cache_configs;configs.push({pattern:match2,remotes:src.remotes,enabled:src.enabled,target:src.target,mode:src.mode}),__privateMethod(this,_SettingsTab_instances,updateConfigs_fn).call(this,configs)})})},"#displayConfigsHeader"),displayConfigsList_fn=__name(function(){if(__privateGet(this,_configsList)){__privateGet(this,_configsList).empty();for(const cache of __privateGet(this,_settings).cache_configs){const setting=new CacheSettings(__privateGet(this,_configsList),cache);setting.onChange(_cache2=>{const configs=__privateGet(this,_settings).cache_configs.map(c=>c.pattern===_cache2.pattern?_cache2:c);__privateMethod(this,_SettingsTab_instances,updateConfigs_fn).call(this,configs)}),setting.onRemove(_cache2=>{const configs=__privateGet(this,_settings).cache_configs.filter(c=>c.pattern!==_cache2.pattern);__privateMethod(this,_SettingsTab_instances,updateConfigs_fn).call(this,configs)})}}},"#displayConfigsList"),handle_fn=__name(function(key,value){__privateGet(this,_settings)[key]=value,__privateGet(this,_plugin).saveSettings()},"#handle"),updateConfigs_fn=__name(function(config){__privateGet(this,_settings).cache_configs=prepareConfigs(config),__privateGet(this,_plugin).saveSettings()},"#updateConfigs"),__name(_SettingsTab,"SettingsTab");let SettingsTab=_SettingsTab;const _MarkdownHandler=class _MarkdownHandler{constructor(plugin){this.plugin=plugin}registerMarkdownProcessor(){this.plugin.registerMarkdownPostProcessor((element,ctx)=>{element.querySelectorAll("img").forEach(async el=>{const resolved=await this.plugin.api.cache(ctx.sourcePath,el.src);resolved&&(el.src=resolved)})})}};__name(_MarkdownHandler,"MarkdownHandler");let MarkdownHandler=_MarkdownHandler;var _log,_plugin2,_vault,_memo,_ImageCachingAPI_instances,findCache_fn;const _ImageCachingAPI=class _ImageCachingAPI{constructor(plugin){__privateAdd(this,_ImageCachingAPI_instances);__privateAdd(this,_log,new Logger("ImageCachingAPI"));__privateAdd(this,_plugin2);__privateAdd(this,_vault);__privateAdd(this,_memo,new Map);__privateSet(this,_plugin2,plugin),__privateSet(this,_vault,plugin.app.vault)}mayCache(notepath,remote){return!!__privateMethod(this,_ImageCachingAPI_instances,findCache_fn).call(this,notepath,remote)}async isCached(notepath,remote){const resolved=await this.resolve(notepath,remote);return resolved?await __privateGet(this,_vault).adapter.exists(resolved):!1}async resource(notepath,remote){const resolved=await this.resolve(notepath,remote);if(!resolved)return;const file=__privateGet(this,_vault).getFileByPath(resolved);return file?__privateGet(this,_vault).getResourcePath(file):void 0}async resolve(notepath,remote){if(!URL.isUrl(remote))throw new ImageError("remote-no-url",`remote('${remote}')`);const baseUrl=URL.getBaseurl(remote);if(!baseUrl)throw new ImageError("remote-no-url",`remote('${remote}')`);if(__privateGet(this,_memo).has(baseUrl))return __privateGet(this,_memo).get(baseUrl);const matcher=__privateMethod(this,_ImageCachingAPI_instances,findCache_fn).call(this,notepath,remote);if(!matcher)return;const name=URI.getBasename(baseUrl),ext2=URI.getExt(baseUrl)||await getRemoteExt(remote);if(!ext2)throw new ImageError("remote-no-ext");const path2=URI.join(matcher.resolve(notepath),name+"."+ext2),res=__privateGet(this,_plugin2).settings.allow_characters?obsidian.normalizePath(path2):obsidian.normalizePath(URI.normalize(path2));return __privateGet(this,_memo).set(baseUrl,res),res}async cache(notepath,remote){const log=__privateGet(this,_log).group(`Caching <${remote}>`),resolved=await this.resolve(notepath,remote);if(!resolved){log.flush("Caching avoided",{notepath,remote});return}log.debug(`Resolved <${resolved}>`,{notepath,remote});const file1=__privateGet(this,_vault).getFileByPath(resolved);if(file1)return log.flush(`Already cached <${resolved}>`),__privateGet(this,_vault).getResourcePath(file1);const content=await getRemoteContent(remote);await __privateGet(this,_vault).adapter.mkdir(URI.getParent(resolved)),await __privateGet(this,_vault).adapter.writeBinary(resolved,content);const file2=__privateGet(this,_vault).getFileByPath(resolved);if(file2)return log.flush(`Freshly cached <${resolved}>`),__privateGet(this,_vault).getResourcePath(file2);log.flush(`Error caching <${resolved}>`)}async remove(path2){throw Error("not yet implemented")}};_log=new WeakMap,_plugin2=new WeakMap,_vault=new WeakMap,_memo=new WeakMap,_ImageCachingAPI_instances=new WeakSet,findCache_fn=__name(function(notepath,remote){const matcher=__privateGet(this,_plugin2).state.cache_matchers.find(matcher2=>matcher2.testPath(notepath));if(matcher?.isEnabled()&&!__privateGet(this,_plugin2).state.url_ignore_matcher(remote))return __privateGet(this,_plugin2).state.url_cache_matcher(remote)||matcher.testRemote(remote)?matcher:void 0},"#findCache"),__name(_ImageCachingAPI,"ImageCachingAPI");let ImageCachingAPI=_ImageCachingAPI;const DEFAULT_SETTINGS={allow_characters:!1,url_param_cache:"cache_image",url_param_ignore:"ignore_image",cache_configs:[{pattern:"*",remotes:[{whitelisted:!1,pattern:"*"}],enabled:!1,target:"",mode:"NOTE"}]};var _log2,_ImageCachingPlugin_instances,prepareState_fn;const _ImageCachingPlugin=class _ImageCachingPlugin extends obsidian.Plugin{constructor(app,manifest){super(app,manifest);__privateAdd(this,_ImageCachingPlugin_instances);__privateAdd(this,_log2);__privateSet(this,_log2,new Logger("ImageCachingPlugin")),this.settings={},this.state={},this.api=new ImageCachingAPI(this),this.markdown=new MarkdownHandler(this),globalThis.ImageCaching=this.api}async onload(){await this.loadSettings(),this.addSettingTab(new SettingsTab(this)),this.markdown.registerMarkdownProcessor()}async onunload(){}async loadSettings(){const log=__privateGet(this,_log2).group("Loading Settings"),{cache_configs,...primitives}=await this.loadData()||{};this.settings=Object.assign({},DEFAULT_SETTINGS,primitives),this.settings.cache_configs=prepareConfigs([...cache_configs||[],...DEFAULT_SETTINGS.cache_configs]),log.debug("Loaded: ",this.settings),log.flush("Loaded Settings"),__privateMethod(this,_ImageCachingPlugin_instances,prepareState_fn).call(this)}async saveSettings(){const log=__privateGet(this,_log2).group("Saving Settings"),data=Object.assign({},this.settings);data.cache_configs=prepareConfigs(data.cache_configs),await this.saveData(data),log.debug("Saved: ",data),log.flush("Saved Settings"),__privateMethod(this,_ImageCachingPlugin_instances,prepareState_fn).call(this)}};_log2=new WeakMap,_ImageCachingPlugin_instances=new WeakSet,prepareState_fn=__name(function(){__privateGet(this,_log2).info("Prepare state"),this.state={cache_matchers:prepareConfigMatchers(this.settings.cache_configs),url_cache_matcher:prepareRemoteMatcher(this.settings.url_param_cache),url_ignore_matcher:prepareRemoteMatcher(this.settings.url_param_ignore)}},"#prepareState"),__name(_ImageCachingPlugin,"ImageCachingPlugin");let ImageCachingPlugin=_ImageCachingPlugin;exports.DEFAULT_SETTINGS=DEFAULT_SETTINGS;exports.default=ImageCachingPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
